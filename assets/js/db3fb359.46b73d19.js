"use strict";(self.webpackChunkdeepstream_io_website=self.webpackChunkdeepstream_io_website||[]).push([[2795],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3006:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return p},default:function(){return h}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(2360),s=["components"],l={title:"File Authentication",tags:["authentication","file","hash","crypto"]},c=void 0,u={unversionedId:"tutorials/core/auth/file",id:"tutorials/core/auth/file",title:"File Authentication",description:"File-based authentication allows you to store usernames, passwords or password hashes and optional meta-data in a file that will be used to authenticate incoming connections.",source:"@site/docs/00-tutorials/20-core/20-auth/20-file.mdx",sourceDirName:"00-tutorials/20-core/20-auth",slug:"/tutorials/core/auth/file",permalink:"/docs/tutorials/core/auth/file",editUrl:"https://github.com/deepstreamIO/deepstream.io-website/docs/00-tutorials/20-core/20-auth/20-file.mdx",tags:[{label:"authentication",permalink:"/docs/tags/authentication"},{label:"file",permalink:"/docs/tags/file"},{label:"hash",permalink:"/docs/tags/hash"},{label:"crypto",permalink:"/docs/tags/crypto"}],version:"current",sidebarPosition:20,frontMatter:{title:"File Authentication",tags:["authentication","file","hash","crypto"]},sidebar:"tutorialSidebar",previous:{title:"Auth None",permalink:"/docs/tutorials/core/auth/none"},next:{title:"Storage Authentication",permalink:"/docs/tutorials/core/auth/storage"}},p=[{value:"Using file-based authentication",id:"using-file-based-authentication",children:[],level:2}],d={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"File-based authentication allows you to store usernames, passwords or password hashes and optional meta-data in a file that will be used to authenticate incoming connections."),(0,o.kt)("p",null,"File-based authentication is a good choice for scenarios with smaller amounts of connections that need authenticating, e.g. publicly readable realtime dashboards with a small number of provider processes delivering the data."),(0,o.kt)("h2",{id:"using-file-based-authentication"},"Using file-based authentication"),(0,o.kt)("p",null,"To enable authentication to a deepstream server with user credentials stored in a local file, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," key to ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"auth")," section of the server's ",(0,o.kt)("a",{parentName:"p",href:"../../../docs/server/configuration"},"configuration file"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"auth:\n  type: file\n  options:\n    users: fileLoad(users.yml) # Path to the user file. Can be json, js or yml\n    hash: 'md5' # the name of a HMAC digest algorithm\n    iterations: 100 # the number of times the algorithm should be applied\n    keyLength: 32 # the length of the resulting key\n    reportInvalidParameters: true # return when credentials are incorrect: missing username or password\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"users")," key contains a path to the file relative to the config file, that defines your users and passwords. By default this is the ",(0,o.kt)("em",{parentName:"p"},"users.yml")," file that comes with deepstream, but the name or location is up to you."),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"hash")," key add the hashing algorithm to hash the passwords, for example,\nusing ",(0,o.kt)("inlineCode",{parentName:"p"},"md5")," (or any other algorithm supported by your operating system). The ",(0,o.kt)("inlineCode",{parentName:"p"},"iterations")," key sets how many times the algorithm should be applied to the user's password, and ",(0,o.kt)("inlineCode",{parentName:"p"},"keyLength")," is the length of the generated key. These should match how you hashed the passwords."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"hash")," key in order to use cleartext passwords (Not advised in production settings!). Otherwise, the provided password upon login must be the already hashed password using the same algorithm you specified in options."))),(0,o.kt)("p",null,"In the ",(0,o.kt)("em",{parentName:"p"},"users")," file, create a list of your users and their hashed passwords (you can create hashes with your setting using deepstreams ",(0,o.kt)("a",{parentName:"p",href:"../../../docs/server/command-line-interface#deepstream-hash"},"hash command"),")."),(0,o.kt)("p",null,"You also have the option to specify:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"clientData")," \u2013 user data you want to be sent to the client upon successful login,"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"serverData")," \u2013 user data you want to be sent to permissioning.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"chris:\n  password: tsA+ks76hGGSGHF8**/JHGusy78=75KQ2Mzm\n  clientData:\n    favorite color: blue\n  serverData:\n    department: admin\n\nfred:\n  password: jhdGHJ7&0-9)GGSGHF8**/JHGusy78sjHJ&78\n  clientData:\n    favorite color: red\n  serverData:\n    department: finance\n")),(0,o.kt)("p",null,"Start the deepstream server and you should see the authentication type confirmed in the startup log."),(0,o.kt)("p",null,"In your application code you can now connect to the deepstream server and try to login a user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const { DeepstreamClient } = require('@deepstream/client')\nconst client = deepstream('localhost:6021')\n\nclient.login({\n  username: 'chris',\n  password: 'password' // NEEDS TO BE REAL\n})\n")),(0,o.kt)("p",null,"You can then handle the outcome of the login request in your JavaScript code, for example:"),(0,o.kt)(i.ZP,{mdxType:"JsLogin"}))}h.isMDXComponent=!0},2360:function(e,t,n){n.d(t,{ZP:function(){return l}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={toc:[]};function l(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// ES5\nconst { DeepstreamClient } = require('@deepstream/client')\nconst client = new DeepstreamClient('localhost:6020');\n\nclient.login({\n  username: 'chris',\n  password: 'password' // NEEDS TO BE REAL\n}, (success, clientData) => {\n  if (success) {\n    // Do stuff now your authenticated\n  } else {\n      // Unhappy path of an unsuccesful login\n  }\n})\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"//ES6\nimport deepstream from '@deepstream/client'\nconst client = new DeepstreamClient('localhost:6020')\n\ntry {\n  const clientData = await client.login({\n    username: 'chris',\n    password: 'password' // NEEDS TO BE REAL\n  })\n  // Do stuff now your authenticated\n} catch (error) {\n  // Unhappy path of an unsuccesful login\n}\n")))}l.isMDXComponent=!0}}]);