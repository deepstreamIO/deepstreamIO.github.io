"use strict";(self.webpackChunkdeepstream_io_website=self.webpackChunkdeepstream_io_website||[]).push([[1559],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=o,h=d["".concat(l,".").concat(g)]||d[g]||p[g]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4141:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={title:"Logging in to deepstream",description:"Step three: How to login to the server using HTTP auth"},l=void 0,c={unversionedId:"guides/live-progress-bar/login",id:"guides/live-progress-bar/login",title:"Logging in to deepstream",description:"Step three: How to login to the server using HTTP auth",source:"@site/docs/20-guides/live-progress-bar/25-login.md",sourceDirName:"20-guides/live-progress-bar",slug:"/guides/live-progress-bar/login",permalink:"/docs/guides/live-progress-bar/login",editUrl:"https://github.com/deepstreamIO/deepstream.io-website/docs/20-guides/live-progress-bar/25-login.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{title:"Logging in to deepstream",description:"Step three: How to login to the server using HTTP auth"},sidebar:"tutorialSidebar",previous:{title:"Setting up the backend",permalink:"/docs/guides/live-progress-bar/setting-up-the-backend"},next:{title:"Emitting events",permalink:"/docs/guides/live-progress-bar/server-events"}},u=[{value:"Adding a HTTP authentication endpoint",id:"adding-a-http-authentication-endpoint",children:[],level:3},{value:"Configuring deepstream",id:"configuring-deepstream",children:[],level:3},{value:"Connecting client to deepstream",id:"connecting-client-to-deepstream",children:[],level:2},{value:"Logging client into deepstream",id:"logging-client-into-deepstream",children:[],level:2},{value:"Enabling open-auth for anonymous users",id:"enabling-open-auth-for-anonymous-users",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Since we already have an express server running let's just use it to add an authentication endpoint."),(0,i.kt)("h3",{id:"adding-a-http-authentication-endpoint"},"Adding a HTTP authentication endpoint"),(0,i.kt)("p",null,"First thing we'll need to do is add a HTTP endpoint that responds to a POST request with the correct structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // The user unique id\n  "id": "uuid",\n  // The data used by the server for permission purposes\n  "serverData": {},\n  // The data returned to the user on a successful login\n  "clientData": {}\n}\n')),(0,i.kt)("p",null,"So putting that into express as a post will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// A very basic token function\nfunction isValidToken (token) {\n  return token !== 'this-is-my-token'\n}\n\napp.post('/realtime-login', (req, res) => {\n  if (isValidToken(req.body.token) === false) {\n    response.status(401)\n    return\n  }\n\n  response.json({\n    id: 'the-only-authenticated-user',\n    serverData: { role: 'admin' },\n    clientData: {}\n  })\n})\n")),(0,i.kt)("h3",{id:"configuring-deepstream"},"Configuring deepstream"),(0,i.kt)("p",null,"In order to use HTTP Authentication please enable the following auth module in your server config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"auth:\n  -\n    type: http\n    options:\n      # a post request will be send to this url on every incoming connection\n      endpointUrl: http://localhost:9090/realtime-login\n      # any of these will be treated as access granted\n      permittedStatusCodes: [ 200 ]\n      # if the webhook didn't respond after this amount of milliseconds, the connection will be rejected\n      requestTimeout: 2000\n      # the codes which the auth handler should retry. This is useful for when the API you depend on is \n      # flaky or going through a not so blue/green deployment\n      retryStatusCodes: [ 404, 504 ]\n      # the maximum amount of retries before returning a false login\n      retryAttempts: 3\n      # the time in milliseconds between retries\n      retryInterval: 5000\n")),(0,i.kt)("h2",{id:"connecting-client-to-deepstream"},"Connecting client to deepstream"),(0,i.kt)("p",null,"To ensure it works we need to connect the client to deepstream. To do so you simply just create a deepstream instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const client = new DeepstreamClient('localhost:6020/deepstream')\n")),(0,i.kt)("p",null,"You can then look at and monitor the deepstream connection status in order to see if your connected, useful to react to when the connection is ever lost."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Getting the connection state\nclient.getConnectionState() // This will return AWAITING_AUTHENTICATION\n\nclient.on('connectionStateChanged', (newState) => {\n    // newState will be OPEN when the connection has been correctly authenticated\n})\n")),(0,i.kt)("h2",{id:"logging-client-into-deepstream"},"Logging client into deepstream"),(0,i.kt)("p",null,"Great! You now have a connection to the server. The last thing to do is login. In order to do you so you can either use Promises, async/await or a login callback. For code readability I will be using async/await for all examples in this guide."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"async () => {\n    const clientData = await client.login({ token: 'this-is-my-token' })\n    client.getConnectionState() // This will return OPEN\n}\n")),(0,i.kt)("h2",{id:"enabling-open-auth-for-anonymous-users"},"Enabling open-auth for anonymous users"),(0,i.kt)("p",null,"In this application we actually don't actually care about the front-end permissions, since anyone can request a progress event. This is where multiple authentication providers can shine. By just adding an open authentication as the last (in this case second) authentication layer all users are accepted, but we'll be able differently permission anonymous users to greatly limit their impact"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"auth:\n  -\n    type: http\n    options: ...\n  -\n    type: open\n")),(0,i.kt)("p",null,"And to login in the browser just add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const client = deepstream(\"localhost:6020/deepstream\")\n// Since it's open we don't need pass anything in\nclient.login()\n")))}d.isMDXComponent=!0}}]);