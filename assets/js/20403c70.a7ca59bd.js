"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[6570],{4433:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(8168),a=(n(6540),n(5680));const s={title:"Getting started with HTTP",description:"Learn how to start a server and interact with a HTTP API",logoImage:"http.png"},i=void 0,o={unversionedId:"tutorials/getting-started/http",id:"tutorials/getting-started/http",title:"Getting started with HTTP",description:"Learn how to start a server and interact with a HTTP API",source:"@site/docs/00-tutorials/01-getting-started/20-http.md",sourceDirName:"00-tutorials/01-getting-started",slug:"/tutorials/getting-started/http",permalink:"/docs/tutorials/getting-started/http",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/00-tutorials/01-getting-started/20-http.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Getting started with HTTP",description:"Learn how to start a server and interact with a HTTP API",logoImage:"http.png"},sidebar:"tutorialSidebar",previous:{title:"Getting started with JavaScript",permalink:"/docs/tutorials/getting-started/javascript"},next:{title:"Installing on Linux",permalink:"/docs/tutorials/install/linux"}},l=[{value:"Start the server",id:"start-the-server",children:[],level:2},{value:"Events (publish-subscribe)",id:"events-publish-subscribe",children:[],level:2}],c={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This guide will introduce deepstream's HTTP interface, and show how it can be used to access\nRecords, Events, RPCs and Presence."),(0,a.yg)("p",null,"The first thing you'll need to access the HTTP API is your application's unique HTTP URL."),(0,a.yg)("h2",{id:"start-the-server"},"Start the server"),(0,a.yg)("p",null,"Let's start by installing the server. Just pick the ",(0,a.yg)("a",{parentName:"p",href:"../install/linux"},"right version for your operating system")," and follow its steps. Once the server is installed, you can start it with:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"deepstream start\n")),(0,a.yg)("p",null,"To see how it works in real-time we can set up a javascript WebSocket client. To get that setup,\ntake a look at the ",(0,a.yg)("a",{parentName:"p",href:"javascript"},"getting started with javascript"),"\ntutorial."),(0,a.yg)("h2",{id:"events-publish-subscribe"},"Events (publish-subscribe)"),(0,a.yg)("p",null,"We'll use the JS client to subscribe to the event 'test-event':"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"ds.event.subscribe( 'test-event', function( eventData ){\n  console.log( eventData );\n});\n")),(0,a.yg)("p",null,"... and now we can publish events using an HTTP client, such as ",(0,a.yg)("a",{parentName:"p",href:"http://api.jquery.com/jquery.ajax/"},"jQuery.ajax"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},"const requestBody = {\n  body: [{\n    topic: 'event',\n    action: 'emit',\n    eventName: 'test-event',\n    data: { some: 'data' }\n  }]\n};\n\nconst url = '<YOUR HTTP URL>';\n\n$.ajax({\n  method: 'POST',\n  headers: { 'content-type': 'application/json' },\n  url: url,\n  data: JSON.stringify(requestBody)\n}).done(function (response) {\n  console.log('The request was a', response.result);\n});\n")),(0,a.yg)("p",null,"... or cURL:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Content-Type: application/json" -d \'{\n  "body": [{\n    "topic": "event",\n    "action": "emit",\n    "eventName": "test-event",\n    "data": "some test data"\n  }]\n}\' "<YOUR HTTP URL>"\n')),(0,a.yg)("p",null,"For more information see ",(0,a.yg)("a",{parentName:"p",href:"../../docs/client-http/v1"},"deepstream HTTP docs"),"."))}u.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>h});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,h=u["".concat(l,".").concat(g)]||u[g]||d[g]||s;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);