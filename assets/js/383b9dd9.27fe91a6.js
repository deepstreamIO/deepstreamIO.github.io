"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[2826],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||r;return n?i.createElement(m,s(s({ref:t},c),{},{components:n})):i.createElement(m,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var u=2;u<r;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},316:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var i=n(7462),o=n(3366),r=(n(7294),n(3905)),s=["components"],a={title:"Plugin Introduction",description:"What is a deepstream plugin and how can I make my own?"},l=void 0,u={unversionedId:"tutorials/custom-plugins/an-overview",id:"tutorials/custom-plugins/an-overview",title:"Plugin Introduction",description:"What is a deepstream plugin and how can I make my own?",source:"@site/docs/00-tutorials/70-custom-plugins/10-an-overview.md",sourceDirName:"00-tutorials/70-custom-plugins",slug:"/tutorials/custom-plugins/an-overview",permalink:"/docs/tutorials/custom-plugins/an-overview",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/00-tutorials/70-custom-plugins/10-an-overview.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Plugin Introduction",description:"What is a deepstream plugin and how can I make my own?"},sidebar:"tutorialSidebar",previous:{title:"HTTP and Log Monitoring",permalink:"/docs/tutorials/plugins/monitoring/"},next:{title:"Building your own custom plugin",permalink:"/docs/tutorials/custom-plugins/custom-plugin"}},c=[{value:"Authentication",id:"authentication",children:[],level:2},{value:"Permissioning",id:"permissioning",children:[],level:2},{value:"Cache",id:"cache",children:[],level:2},{value:"Storage",id:"storage",children:[],level:2},{value:"Logger",id:"logger",children:[],level:2},{value:"Connection Endpoints",id:"connection-endpoints",children:[],level:2},{value:"Monitoring",id:"monitoring",children:[],level:2},{value:"Cluster Node",id:"cluster-node",children:[],level:2},{value:"Locks",id:"locks",children:[],level:2},{value:"Cluster Registry",id:"cluster-registry",children:[],level:2},{value:"State Registry Factory",id:"state-registry-factory",children:[],level:2},{value:"Subscription Registry Factory",id:"subscription-registry-factory",children:[],level:2},{value:"Custom Plugins",id:"custom-plugins",children:[],level:2}],p={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Deepstream at is core is a collection of plugins, handlers and a protocol that interact with each to provide a powerful set of features that can power large realtime applications."),(0,r.kt)("p",null,"There are currently a total of 7 plugins that are required by deepstream to run, all of which have defaults built in. Before we dive into those, let's first look at the core ",(0,r.kt)("inlineCode",{parentName:"p"},"PluginAPI"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface PluginOptionsConfig {\n    ... all options go here ...\n}\n\ninterface DeepstreamPlugin {\n  constructor (pluginOptions: PluginOptionsConfig, services: DeepstreamServices, config: DeepstreamConfig)\n  // The name of plugin to be shown when loaded succesfully\n  public abstract description: string\n  // An async callback to indicate the plugin is ready to use,\n  // for example when setting up a connection to a database\n  public async whenReady (): Promise<void> {}\n  // An optional API that is called after whenReady. This helps\n  // plugins remove logic from the constructor, which is sometimes\n  // a useful pattern\n  public init? (): void\n  // An async call back that indicates when the connector has shutdown\n  // succesfully\n  public async close (): Promise<void> {}\n}\n")),(0,r.kt)("p",null,"Implementing this API is all that is needed for deepstream to register the plugin. Obviously\njust having this code wouldn't add any functionality! Deepstream offers a powerful set of interfaces\nthat allow developers to modify nearly every aspect of functionality or add your own. Let's look at the\ndifferent types, and remember to take a deeper dive into each section to see an example implementation!"),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Authentication provides three pieces of functionality to deepstream:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Validates whether a user is allowed to login"),(0,r.kt)("li",{parentName:"ol"},"It returns serverData, which is sensitive information used by deepstream to aid permissioning"),(0,r.kt)("li",{parentName:"ol"},"It returns clientData, which is data that is forwarded to the client on login")),(0,r.kt)("p",null,"To see a guide of an Authentication plugin that only allows users to login with a preconfigured\ntoken please look ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-example-plugins/tree/master/src/auth"},"here")),(0,r.kt)("h2",{id:"permissioning"},"Permissioning"),(0,r.kt)("p",null,"Permissioning checks every single message that goes through the system to ensure the sender is\nallowed to perform the operation. Deepstream offers a powerful permissioning language called Valve\nthat allows users to write rules that map against simplified representations. However, users can\ngenerate their own permissioning logic, which can allow you to interact with third-party APIs or\nimplement smarter caching depending on your use case."),(0,r.kt)("p",null,"To see a guide of a Permission plugin that only allows users to interact with actions that have\ntheir userId in the name please look ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-example-plugins/tree/master/src/permission"},"here")),(0,r.kt)("h2",{id:"cache"},"Cache"),(0,r.kt)("p",null,"The cache plugin provides a way for deepstream to optimally store, retrieve and delete data in a\nsimple (usually key/value) data store. Deepstream offers a few out of the box for most of the\npopular techs, like Redis, Memcache, Hazelcast and in memory. However you can easily implement\nyour own by implementing it's simple API."),(0,r.kt)("p",null,"The main performance benefit you always want to implement with cache layers is to seperate the version\nand values so that retrieving thousands of records in one go is significantly faster!"),(0,r.kt)("p",null,"To see a guide of a Cache plugin that stores data in memory please look ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-example-plugins/tree/master/src/cache"},"here")),(0,r.kt)("h2",{id:"storage"},"Storage"),(0,r.kt)("p",null,"The storage API is a subset of the Cache API. It's used alot less frequent than the cache layer,\nonce for each write, but only once for a record thoughout the records entire lifetime!"),(0,r.kt)("p",null,"To see a guide of a simple storage plugin that stores it's data please look ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-example-plugins/tree/master/src/storage"},"here"),".\nWord of advice though, please don't use this system in production unless your okay with insanely\nslow speeds."),(0,r.kt)("h2",{id:"logger"},"Logger"),(0,r.kt)("p",null,"The Logger is responsible for getting important deepstream information out into the world for us\nto be able to trace actions efficiently. Currently the default logger is that std out, as dealing\nwith logs is usually quite expensive and so is better to leave for seperate processes. However you can\neasily integrate with multiple logging solutions and send your logs directly to your logging frameworks."),(0,r.kt)("p",null,"To see a guide of a simple log plugin that buffers debug logs in memory until an error occurs (helps debugging!)\nplease look ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-example-plugins/tree/master/src/logger"},"here")),(0,r.kt)("h2",{id:"connection-endpoints"},"Connection Endpoints"),(0,r.kt)("p",null,"A connection endpoint is the deepstream nervous system. Without it you can't get any messages back and forth between\nit and the outside world. We provide three build in solutions, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/websockets/ws"},"ws"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/uNetworking/uWebSockets.js/"},"uWebsockets.js")," and HTTP via a standard called JIF."),(0,r.kt)("p",null,"However its super simple to build your own, which in turn will allow you to create your own crazy protocols. Check out the source code for inspiration."),(0,r.kt)("h2",{id:"monitoring"},"Monitoring"),(0,r.kt)("p",null,"Monitoring is a new API that allows users to track all high level actions that happen in deepstream and show it in a\npretty display using a system such as grafana."),(0,r.kt)("p",null,"To see an example monitoring plugin that exposes a HTTP server to allow users to query it's currently state please\nlook ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-example-plugins/tree/master/src/monitoring"},"here")),(0,r.kt)("p",null,"Using the monitoring plugin it's straightforward to implement an audit log of every user message (event, record, rpc request and data) that goes through the server for compliance purposes."),(0,r.kt)("h2",{id:"cluster-node"},"Cluster Node"),(0,r.kt)("p",null,"The almighty cluster node!. It's responsible for allowing deepstream nodes to communicate with each other. The server comes with a no-cluster and vertical cluster options in order to use all CPU cores."),(0,r.kt)("p",null,"There's no magic to this, purely just a ",(0,r.kt)("inlineCode",{parentName:"p"},"send"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sendDirect")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"recieve")," method."),(0,r.kt)("p",null,"To see an example clustering plugin that allows nodes to talk to each other using redis please look at the redis cluster node source code ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-clusternode-redis"},"here")," or the vertical cluster source code ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io/blob/master/src/services/cluster-node/vertical-cluster-node.ts"},"here")),(0,r.kt)("h2",{id:"locks"},"Locks"),(0,r.kt)("p",null,"Deepstream needs distributed locks for listening. The build in mechanism works fine, but if you want all state to live in an external system (like redis) you can build your own."),(0,r.kt)("p",null,"If anyone would like a guide on how to write your own please let us know!"),(0,r.kt)("h2",{id:"cluster-registry"},"Cluster Registry"),(0,r.kt)("p",null,"Deepstream needs a registry of all servers within the cluster in order to cleanup state effectively when a node\nexits and to elect a leader to decisions that can't be distributed, like who should be in charge of locks (when using the default plugin). This API is currently sync which makes it quite hard to be experimental with. Why? Because\nsync is just way quicker than using async/await. Once that changes (or someone really wants an async API) we'll demonstrate how to write one!"),(0,r.kt)("h2",{id:"state-registry-factory"},"State Registry Factory"),(0,r.kt)("p",null,"The State Registry is what allows deepstream to be aware of the state of the entire cluster, useful in order to unify\npresence, subscriptions and listening across multiple nodes. This API is currently sync which makes it quite hard to be experimental with. Why? Because sync is just way quicker than using async/await. Once that changes (or someone really wants an async API) we'll demonstrate how to write one!"),(0,r.kt)("h2",{id:"subscription-registry-factory"},"Subscription Registry Factory"),(0,r.kt)("p",null,"The Subscription Registry is sort of like the dispatch centre of deepstream. It holds all subscriptions and gets told whenever someone subscribes or unsubscribes to anything. It's also responsible for sending those messages out\nto all interested clients. This is a plugin purely because we want to start experimenting with different broadcast\npatterns and allowing users to decide which one makes most sense. We'll be adding an example plugin to this in the future as it's quite complex. However if anyone is interested please raise a git issue and we'll be more than happy to run you through it!"),(0,r.kt)("h2",{id:"custom-plugins"},"Custom Plugins"),(0,r.kt)("p",null,"A custom plugin is something that can add new functionality to connect your world to internal deepstream logic and services. A couple of random examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Forcefully terminating user sessions via a HTTP request"),(0,r.kt)("li",{parentName:"ul"},"Refreshing valve permissions on demand without a server restart"),(0,r.kt)("li",{parentName:"ul"},"Send login/logout events to a third party system"),(0,r.kt)("li",{parentName:"ul"},"Changing deepstream configuration during runtime (like timeout durations)")),(0,r.kt)("p",null,"The custom plugin API currently is just in its infancy, and we're hoping that we get requests of useful (and crazy!)\nideas to help us mold it into something even more powerful!"),(0,r.kt)("p",null,"To see example custom plugins please look at ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/custom-plugins/custom-plugin"},"building custom plugins")))}d.isMDXComponent=!0}}]);