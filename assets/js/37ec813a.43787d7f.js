"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[2032],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),s=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return o.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=s(t),d=r,m=f["".concat(u,".").concat(d)]||f[d]||p[d]||i;return t?o.createElement(m,a(a({ref:n},l),{},{components:t})):o.createElement(m,a({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7623:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return f}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],c={title:"Binary WebSocket Endpoint"},u=void 0,s={unversionedId:"tutorials/plugins/connection-endpoint/websocket-binary",id:"tutorials/plugins/connection-endpoint/websocket-binary",title:"Binary WebSocket Endpoint",description:"How to configure:",source:"@site/docs/00-tutorials/60-plugins/40-connection-endpoint/01-websocket-binary.md",sourceDirName:"00-tutorials/60-plugins/40-connection-endpoint",slug:"/tutorials/plugins/connection-endpoint/websocket-binary",permalink:"/docs/tutorials/plugins/connection-endpoint/websocket-binary",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/00-tutorials/60-plugins/40-connection-endpoint/01-websocket-binary.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Binary WebSocket Endpoint"},sidebar:"tutorialSidebar",previous:{title:"HTTP Endpoint",permalink:"/docs/tutorials/plugins/connection-endpoint/http"},next:{title:"JSON Endpoint",permalink:"/docs/tutorials/plugins/connection-endpoint/websocket-json"}},l=[{value:"How to configure:",id:"how-to-configure",children:[],level:3}],p={toc:l};function f(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"how-to-configure"},"How to configure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"connectionEndpoints:\n  - type: ws-binary\n    options:\n      # url path websocket connections connect to\n      urlPath: /deepstream\n      # the amount of milliseconds between each ping/heartbeat message\n      heartbeatInterval: 30000\n      # the amount of milliseconds that writes to sockets are buffered\n      outgoingBufferTimeout: 0\n      # the maximum amount of bytes to buffer before flushing, stops the client from large enough packages\n      # to block its responsiveness\n      maxBufferByteSize: 100000\n\n      # Security\n      # amount of time a connection can remain open while not being logged in\n      unauthenticatedClientTimeout: 180000\n      # invalid login attempts before the connection is cut\n      maxAuthAttempts: 3\n      # maximum allowed size of an individual message in bytes\n      maxMessageSize: 1048576\n      # should the server log invalid auth data, defaults to false\n      logInvalidAuthData: false\n      # optional required headers\n      headers: []\n")))}f.isMDXComponent=!0}}]);