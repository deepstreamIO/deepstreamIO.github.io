"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[5174],{598:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>i});var s=t(8168),r=(t(6540),t(5680));const n={title:"Postgres DataBase Connector",tags:["postgres","postgresql","deepstream","realtime","search"]},o=void 0,l={unversionedId:"tutorials/plugins/database/postgres",id:"tutorials/plugins/database/postgres",title:"Postgres DataBase Connector",description:"What is Postgres?",source:"@site/docs/00-tutorials/60-plugins/30-database/10-postgres.md",sourceDirName:"00-tutorials/60-plugins/30-database",slug:"/tutorials/plugins/database/postgres",permalink:"/docs/tutorials/plugins/database/postgres",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/00-tutorials/60-plugins/30-database/10-postgres.md",tags:[{label:"postgres",permalink:"/docs/tags/postgres"},{label:"postgresql",permalink:"/docs/tags/postgresql"},{label:"deepstream",permalink:"/docs/tags/deepstream"},{label:"realtime",permalink:"/docs/tags/realtime"},{label:"search",permalink:"/docs/tags/search"}],version:"current",sidebarPosition:10,frontMatter:{title:"Postgres DataBase Connector",tags:["postgres","postgresql","deepstream","realtime","search"]},sidebar:"tutorialSidebar",previous:{title:"Hazelcast Cache Connector",permalink:"/docs/tutorials/plugins/cache/hazelcast"},next:{title:"MongoDB DataBase Connector",permalink:"/docs/tutorials/plugins/database/mongodb"}},i=[{value:"What is Postgres?",id:"what-is-postgres",children:[],level:2},{value:"Why you should use Postgres as a database for deepstream",id:"why-you-should-use-postgres-as-a-database-for-deepstream",children:[],level:2},{value:"Why you should not use Postgres as a database for deepstream",id:"why-you-should-not-use-postgres-as-a-database-for-deepstream",children:[],level:2},{value:"How to use deepstream with Postgres",id:"how-to-use-deepstream-with-postgres",children:[],level:2},{value:"The API at a glance",id:"the-api-at-a-glance",children:[{value:"constructor(options)",id:"constructoroptions",children:[],level:3},{value:"destroy(callback)",id:"destroycallback",children:[],level:3},{value:"createSchema(name, callback)",id:"createschemaname-callback",children:[],level:3},{value:"destroySchema(name, callback)",id:"destroyschemaname-callback",children:[],level:3},{value:"getSchemaOverview(callback, name)",id:"getschemaoverviewcallback-name",children:[],level:3},{value:"subscribe(callback, done, schema)",id:"subscribecallback-done-schema",children:[],level:3},{value:"unsubscribe(callback, done, schema)",id:"unsubscribecallback-done-schema",children:[],level:3},{value:"set(key, version, value, callback)",id:"setkey-version-value-callback",children:[],level:3},{value:"get(key, callback)",id:"getkey-callback",children:[],level:3},{value:"delete(key, callback)",id:"deletekey-callback",children:[],level:3},{value:"query(statement, callback, args, silent)",id:"querystatement-callback-args-silent",children:[],level:3}],level:2}],c={toc:i},d="wrapper";function u(e){let{components:a,...t}=e;return(0,r.yg)(d,(0,s.A)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"what-is-postgres"},"What is Postgres?"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.postgresql.org/"},"PostgreSQL")," or Postgres for short is a relational database management system, similar to MySQL or Oracle. With development starting as early as 1986 and continuous improvement ever since it is as mature and established as databases go and has become one of the most solid and reliable cornerstones of the database world."),(0,r.yg)("p",null,"But that doesn\u2019t mean that Postgres is complicated or old fashioned. Over the years it has evolved from a simple relational database into a powerful data programming platform with elaborate stored procedures, trigger functions, a myriad of datatypes and powerful querying capabilities."),(0,r.yg)("h2",{id:"why-you-should-use-postgres-as-a-database-for-deepstream"},"Why you should use Postgres as a database for deepstream"),(0,r.yg)("p",null,"Postgres is established, reliable and rock solid. But it\u2019s especially its newer functionality that makes it a great fit for deepstream:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"It\u2019s support for binary JSON allows for efficient storage and searching of deepstream records"),(0,r.yg)("li",{parentName:"ul"},"It\u2019s built-in notification mechanism allows to run pub-sub and realtime events based on data-changes, a feature supported by ",(0,r.yg)("inlineCode",{parentName:"li"},"deepstream.io-storage-postgres")),(0,r.yg)("li",{parentName:"ul"},"It\u2019s extensively programmable in C, Python, Perl or Postgres own PL/pgSQL\n-It allows to automatically organize deepstream\u2019s data into tables created on the fly with very little overhead"),(0,r.yg)("li",{parentName:"ul"},"Combining triggers, jsonb-queries and notifications allows for the creation of realtime querying capabilities with streaming results")),(0,r.yg)("h2",{id:"why-you-should-not-use-postgres-as-a-database-for-deepstream"},"Why you should not use Postgres as a database for deepstream"),(0,r.yg)("p",null,"deepstream\u2019s data-structures are schemaless JSON documents identified by a unique key. This makes object-oriented databases a more natural fit as deepstream won\u2019t make much use of Postgres relational features. Beyond that, there\u2019s not much negative to say: Postgres is solid, fast and available from many hosting companies, e.g. ",(0,r.yg)("a",{parentName:"p",href:"https://aws.amazon.com/rds/postgresql/"},"AWS")," or ",(0,r.yg)("a",{parentName:"p",href:"https://www.heroku.com/postgres"},"Heroku")," as well as under a very ",(0,r.yg)("a",{parentName:"p",href:"https://www.postgresql.org/about/licence/"},"permissive open source license")," - give it a go!"),(0,r.yg)("h2",{id:"how-to-use-deepstream-with-postgres"},"How to use deepstream with Postgres"),(0,r.yg)("p",null,"deepstream comes preinstalled with an official connector for postgres."),(0,r.yg)("p",null,"It can be configured in the ",(0,r.yg)("inlineCode",{parentName:"p"},"storage")," section of deepstreams ",(0,r.yg)("inlineCode",{parentName:"p"},"config.yml")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"storage:\n  name: postgres\n  options:\n    user: some-user\n    database: some-database\n    password: some-password\n    host: localhost\n    port: 5432 #postgres default post\n    schema: ds #schema defaults to ds. Will be created if it doesn't exist\n    defaultTable: default # default table name defaults to default\n    max: 10 #concurrent connections\n    idleTimeoutMillis: 30000 #timeout after which connection will be cut\n    writeInterval: 200 #amount of milliseconds during which writes will be buffered\n    useJsonb: false #store values as searchable binary JSON (slower)\n    notifications:\n      CREATE_TABLE: false #Get notified when tables are created\n      DESTROY_TABLE: false #Get notified when tables are dropped\n      INSERT: false # Get notified when records are created\n      UPDATE: false # Get notified when records are updated\n      DELETE: false # Get notified when records are deleted\n")),(0,r.yg)("p",null,"This connector can also be used as a standalone component from node.js to connect to postgres' notification mechanism. To do this, install the connector via"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npm install @deepstream/storage-postgres --save\n#or\nyarn add @deepstream/storage-postgres\n")),(0,r.yg)("p",null,"and instantiate it directly"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const { Connector } = require( '@deepstream/storage-postgres' );\nconst settings = {\n  user: process.env.PG_USER,\n  database: process.env.PG_DB,\n  password: process.env.PG_PASSWORD,\n  host: process.env.PG_HOST,\n  port: parseInt( process.env.PG_PORT, 10 )\n}\n\nconst connector = new Connector( settings )\n\n// start connector\nconnector.init()\n\nconnector.on( 'ready', ()=>{\n    connector.subscribe( event =>{\n        //event will be a map of event and table for CREATE_TABLE and DESTROY_TABLE\n        // { event: 'CREATE_TABLE', table: 'some-table' })\n        // or of event, table and key for INSERT, UPDATE AND DELETE, e.g.\n        // { event: 'INSERT', table: 'some-table', key: 'some-key' }\n    }, err => { if( err ) throw err; })\n\n    //subscriptions can be removed\n    connector.unsubscribe(( err )=>{ /* done */ })\n\n    // the connector also comes with a facility to get a map of all tables and the numbers of items within\n    connector.getSchemaOverview(( err, result ) => {\n        /* result will be e.g.\n        {\n            'some-table': 2,\n            'some-other-table': 1,\n            'new-table': 1,\n            'table-a': 2,\n            'table-b': 2\n        }\n        */\n    })\n})\n")),(0,r.yg)("h2",{id:"the-api-at-a-glance"},"The API at a glance"),(0,r.yg)("h3",{id:"constructoroptions"},"constructor(options)"),(0,r.yg)("p",null,"Create the Connector, see above for options"),(0,r.yg)("h3",{id:"destroycallback"},"destroy(callback)"),(0,r.yg)("p",null,"Destroy the connector. Callback will be invoked once complete"),(0,r.yg)("h3",{id:"createschemaname-callback"},"createSchema(name, callback)"),(0,r.yg)("p",null,"Create a new schema. The schema specified in the constructor options will be implicitly created. Default schema is 'ds'"),(0,r.yg)("h3",{id:"destroyschemaname-callback"},"destroySchema(name, callback)"),(0,r.yg)("p",null,"Destroys an existing schema"),(0,r.yg)("h3",{id:"getschemaoverviewcallback-name"},"getSchemaOverview(callback, name)"),(0,r.yg)("p",null,"Returns a map of tables to their number of rows (see above for example). Name is optional, if omitted, the schema from the options will be used"),(0,r.yg)("h3",{id:"subscribecallback-done-schema"},"subscribe(callback, done, schema)"),(0,r.yg)("p",null,"Subscribe to notifications from the schema. Which notifications you'll receive is determined by the ",(0,r.yg)("inlineCode",{parentName:"p"},"notifications")," option passed to the constructor. callback will be invoked with notifications in the format ",(0,r.yg)("inlineCode",{parentName:"p"},"{ event: 'INSERT', table: 'some-table', key: 'some-key' }"),", done will be called once the subscription is established. Schema is optional."),(0,r.yg)("h3",{id:"unsubscribecallback-done-schema"},"unsubscribe(callback, done, schema)"),(0,r.yg)("p",null,"Removes a previously registered callback or all listeners if callback is omitted. Schema is optional"),(0,r.yg)("h3",{id:"setkey-version-value-callback"},"set(key, version, value, callback)"),(0,r.yg)("p",null,"Writes a value to the database. If key includes a ",(0,r.yg)("inlineCode",{parentName:"p"},"/")," e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"cars/bmw"),", the first part will be used to create a table and the second part as id. Value can be any JSON blob, callback will be invoked once the write is complete. Please note that reads are buffered and batched and might not be executed straight away."),(0,r.yg)("h3",{id:"getkey-callback"},"get(key, callback)"),(0,r.yg)("p",null,"Retrieves a value from a database. Callback will be invoked with error or null, version and value. If record not found version will be -1."),(0,r.yg)("h3",{id:"deletekey-callback"},"delete(key, callback)"),(0,r.yg)("p",null,"Deletes a value from the database"),(0,r.yg)("h3",{id:"querystatement-callback-args-silent"},"query(statement, callback, args, silent)"),(0,r.yg)("p",null,"Low level query interface.  Statement is a PostgreSQL string, args an optional array of arguments for parameterized queries and silent = true ensures that errors are forwarded to the callback rather than thrown/logged."))}u.isMDXComponent=!0},5680:(e,a,t)=>{t.d(a,{xA:()=>d,yg:()=>g});var s=t(6540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,s,r=function(e,a){if(null==e)return{};var t,s,r={},n=Object.keys(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=s.createContext({}),c=function(e){var a=s.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=c(e.components);return s.createElement(i.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},m=s.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,g=u["".concat(i,".").concat(m)]||u[m]||p[m]||n;return t?s.createElement(g,o(o({ref:a},d),{},{components:t})):s.createElement(g,o({ref:a},d))}));function g(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,o=new Array(n);o[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<n;c++)o[c]=t[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);