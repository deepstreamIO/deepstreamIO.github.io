"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[1282],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>f});var n=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=u(r),g=i,f=c["".concat(l,".").concat(g)]||c[g]||d[g]||o;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=g;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[c]="string"==typeof e?e:i,s[1]=a;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},7891:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=r(8168),i=(r(6540),r(5680));const o={title:"Visualizing in the frontend",description:"Step three: Visualizing in the frontend"},s=void 0,a={unversionedId:"guides/live-progress-bar/visualizing-in-the-frontend",id:"guides/live-progress-bar/visualizing-in-the-frontend",title:"Visualizing in the frontend",description:"Step three: Visualizing in the frontend",source:"@site/docs/20-guides/live-progress-bar/40-visualizing-in-the-frontend.md",sourceDirName:"20-guides/live-progress-bar",slug:"/guides/live-progress-bar/visualizing-in-the-frontend",permalink:"/docs/guides/live-progress-bar/visualizing-in-the-frontend",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/live-progress-bar/40-visualizing-in-the-frontend.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{title:"Visualizing in the frontend",description:"Step three: Visualizing in the frontend"},sidebar:"tutorialSidebar",previous:{title:"Emitting events",permalink:"/docs/guides/live-progress-bar/server-events"},next:{title:"Permissions",permalink:"/docs/guides/live-progress-bar/permissions"}},l=[],u={toc:l},p="wrapper";function c(e){let{components:t,...r}=e;return(0,i.yg)(p,(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"All that's left is for us to subscribe to the event and update the progress bar state whenever an event comes through."),(0,i.yg)("p",null,"In the skeleton app we have a function called ",(0,i.yg)("inlineCode",{parentName:"p"},"updateProgressBar")," which takes a the percentage and associated message and sets it on the progress bar."),(0,i.yg)("p",null,"All we need to do to hook up events is subscribe to the unique event when making the request"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"try {\n    // subscribe to changes\n    client.event.subscribe(`progress:${id}`, updateProgressBar)\n    // make the actual post request\n    const data = await postData('http://localhost:9090/post', { id })\n} catch (e) {\n    // error happened getting data\n} finally {\n    // unsubscribe to changes, whether it failed or succeeded\n    client.event.unsubscribe(`progress:${id}`, updateProgressBar)\n}\n")),(0,i.yg)("p",null,"And that's it, you should now have progress events working!"))}c.isMDXComponent=!0}}]);