"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[6536],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4136:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={title:"Valve Permissions",description:"The API for Valve, deepstream's powerful permissioning mechanism"},s=void 0,p={unversionedId:"docs/server/valve-permissions",id:"docs/server/valve-permissions",title:"Valve Permissions",description:"The API for Valve, deepstream's powerful permissioning mechanism",source:"@site/docs/10-docs/10-server/50-valve-permissions.md",sourceDirName:"10-docs/10-server",slug:"/docs/server/valve-permissions",permalink:"/docs/docs/server/valve-permissions",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/10-docs/10-server/50-valve-permissions.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{title:"Valve Permissions",description:"The API for Valve, deepstream's powerful permissioning mechanism"},sidebar:"tutorialSidebar",previous:{title:"User File",permalink:"/docs/docs/server/user-file"},next:{title:"Javascript Client",permalink:"/docs/docs/client-js/client"}},c=[{value:"Rule Types",id:"rule-types",children:[{value:"record",id:"record",children:[],level:3},{value:"event",id:"event",children:[],level:3},{value:"rpc",id:"rpc",children:[],level:3},{value:"presence",id:"presence",children:[],level:3}],level:2},{value:"Variables",id:"variables",children:[{value:"user",id:"user",children:[],level:3},{value:"data",id:"data",children:[],level:3},{value:"oldData",id:"olddata",children:[],level:3},{value:"now",id:"now",children:[],level:3},{value:"action",id:"action",children:[],level:3},{value:"$variableName",id:"variablename",children:[],level:3}],level:2},{value:"Cross reference",id:"cross-reference",children:[{value:"_(recordName)",id:"_recordname",children:[],level:3}],level:2},{value:"String functions",id:"string-functions",children:[],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The API for Valve, deepstream's powerful permissioning mechanism."),(0,l.kt)("h2",{id:"rule-types"},"Rule Types"),(0,l.kt)("p",null,"You can specify permission rules for the following interactions"),(0,l.kt)("h3",{id:"record"},"record"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"create")," triggered when a record is requested for the first time"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"write")," operations that change a record's data. (PATCH & UPDATE)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"read")," reading a record's data"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delete")," deleting a record"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"listen")," listen for other clients subscribing to a record"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"notify")," whether or not the client can notify of records updated directly in database")),(0,l.kt)("h3",{id:"event"},"event"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"publish")," sending events"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"subscribe")," subscribing for events"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"listen")," listen for other clients subscribing to events")),(0,l.kt)("h3",{id:"rpc"},"rpc"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"provide")," registering a client as a RPC provider"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"request")," making a remote procedure call")),(0,l.kt)("h3",{id:"presence"},"presence"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow")," query for connected authenticated clients")),(0,l.kt)("h2",{id:"variables"},"Variables"),(0,l.kt)("p",null,"These variables are available for use within a permission rule"),(0,l.kt)("h3",{id:"user"},"user"),(0,l.kt)("p",null,"the authentication data for the user attempting the read or write, containing the following keys:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    //Boolean, false if id === 'open'\n    isAuthenticated: true, //Boolean\n    //the userId / username as returned by auth the auth provider\n    id: 'johndoe', //String\n    //optional object, containing fields like e.g. role, access level etc\n    //returned by auth provider\n    data: { role: 'admin' } //Object\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")," write to record ",(0,l.kt)("inlineCode",{parentName:"p"},"user-profile")," is only allowed for owner"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'record:\n  user-profile/$username:\n    write: "user.id === $username"\n')),(0,l.kt)("h3",{id:"data"},"data"),(0,l.kt)("p",null,"the incoming data for records, events and rpcs"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")," only allow publishing of event if it has more than 50 likes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'event:\n  facebook-news:\n    publish: "data.likes > 50"\n')),(0,l.kt)("h3",{id:"olddata"},"oldData"),(0,l.kt)("p",null,"the current data, only for records"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")," Only allow bids higher than the current price"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'record:\n  item/*:\n    write: "data.bid > oldData.bid"\n')),(0,l.kt)("h3",{id:"now"},"now"),(0,l.kt)("p",null,"current timestamp on the server in ms"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")," Only allow scheduling appointments in the future"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'rpc:\n  schedule-appointment:\n    request: "data.desiredDate > now"\n')),(0,l.kt)("h3",{id:"action"},"action"),(0,l.kt)("p",null,"the original action that triggered this rule (e.g. UPDATE / PATCH / LISTEN ) etc. Useful for more finegrained/low-level permissions. You can find a list of all available actions ",(0,l.kt)("a",{parentName:"p",href:"../common/constants"},"here")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")," Only allow patch updates"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"record:\n  user-profile/:\n    write: \"data.action === 'PATCH'\"\n")),(0,l.kt)("h3",{id:"variablename"},"$variableName"),(0,l.kt)("p",null,"Variables that are extruded from the record / event / rpc name. Names can contain multiple variables. Variable names start with a dollar and are only allowed to contain uppercase letters, lowercase letters and numbers."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Examples:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'record:\n  user-profile/$userId:\n    # make sure users can only manipulate their own profile\n    write: "$userId === user.id"\nevent:\n  # Make sure the headline for `pet-news/pugs` contains the word pug\n  pet-news/$pet:\n    publish: "data.headline.indexOf( $pet ) !== -1"\n\n')),(0,l.kt)("h2",{id:"cross-reference"},"Cross reference"),(0,l.kt)("h3",{id:"_recordname"},"_(recordName)"),(0,l.kt)("p",null,"Only for records. Cross-references another record and makes the other record's data available for the permission rule."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'record:\n  car-sale/$transactionId:\n    # when booking a new car sale, make sure that\n    # the car that\'s sold exists and that its price\n    # is the same or lower than what the customer is charged\n    write: "_(data.carId) !== null && _(data.carId).price >= data.price"\n\n')),(0,l.kt)("h2",{id:"string-functions"},"String functions"),(0,l.kt)("p",null,"Valve supports the following string functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"startsWith")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"endsWith")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"indexOf")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"match")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"toUpperCase")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"toLowerCase")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"trim"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage Example:")," make sure a postcode only contains numbers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'record:\n    address/*:\n      write: "data.postcode && data.postcode.match( /^[0-9]*$/ )"\n')))}u.isMDXComponent=!0}}]);