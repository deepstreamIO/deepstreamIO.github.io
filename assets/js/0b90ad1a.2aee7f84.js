"use strict";(self.webpackChunkdeepstream_io_website=self.webpackChunkdeepstream_io_website||[]).push([[6766],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,h=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6525:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={title:"Logging in to your boards",description:"Step three: How to login to the server using storage auth"},l=void 0,c={unversionedId:"guides/post-it-board/login",id:"guides/post-it-board/login",title:"Logging in to your boards",description:"Step three: How to login to the server using storage auth",source:"@site/docs/20-guides/post-it-board/20-login.md",sourceDirName:"20-guides/post-it-board",slug:"/guides/post-it-board/login",permalink:"/docs/guides/post-it-board/login",editUrl:"https://github.com/deepstreamIO/deepstream.io-website/docs/20-guides/post-it-board/20-login.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Logging in to your boards",description:"Step three: How to login to the server using storage auth"},sidebar:"tutorialSidebar",previous:{title:"Setting up the postit backend",permalink:"/docs/guides/post-it-board/setting-up-the-backend"},next:{title:"Creating postits",permalink:"/docs/guides/post-it-board/the-postits"}},u=[{value:"Setting up Authentication on the backend",id:"setting-up-authentication-on-the-backend",children:[],level:2},{value:"Connecting client to deepstream",id:"connecting-client-to-deepstream",children:[],level:2},{value:"Logging client into deepstream",id:"logging-client-into-deepstream",children:[],level:2},{value:"Hooking login from the form",id:"hooking-login-from-the-form",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The next step is to create a deepstream client, login and initialize the application."),(0,i.kt)("h2",{id:"setting-up-authentication-on-the-backend"},"Setting up Authentication on the backend"),(0,i.kt)("p",null,"In this guide we be using Storage Authentication, feel free to refer the ",(0,i.kt)("a",{parentName:"p",href:"../../tutorials/core/auth/auth-introduction"},"Authentication")," page to try out other types of authentication or look at some of the alternative different guides."),(0,i.kt)("p",null,"In order to use Storage Authentication please enable the following auth module in your server config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"auth:\n  -\n    type: storage\n    options:\n      # the table users are stored in storage\n      table: 'Users'\n      # automatically create users if they don't exist in the database\n      createUser: true\n      # the name of a HMAC digest algorithm\n      hash: 'md5'\n      # the number of times the algorithm should be applied\n      iterations: 100\n      # the length of the resulting key\n      keyLength: 32\n")),(0,i.kt)("p",null,"This will tell deepstream to authenticate your users against the usernames and passwords stored in the database under a table called Users. We also set ",(0,i.kt)("inlineCode",{parentName:"p"},"createUser")," to true, which means any user logging in with a username that doesn't already exist will be created in the database, useful for merging a signup/login form into one (mostly a development feature)."),(0,i.kt)("h2",{id:"connecting-client-to-deepstream"},"Connecting client to deepstream"),(0,i.kt)("p",null,"First things first, we need to connect this client to deepstream. To do so you simply just create a deepstream instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const client = new DeepstreamClient('localhost:6020/deepstream')\n")),(0,i.kt)("p",null,"You can then look at and monitor the deepstream connection status in order to see if your connected, useful to react to when the connection is ever lost."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Getting the connection state\nclient.getConnectionState() // This will return AWAITING_AUTHENTICATION\n\nclient.on('connectionStateChanged', (newState) => {\n    // newState will be OPEN when the connection has been correctly authenticated\n})\n")),(0,i.kt)("h2",{id:"logging-client-into-deepstream"},"Logging client into deepstream"),(0,i.kt)("p",null,"Great! You now have a connection to the server. The last thing to do is login. In order to do you so you can either use Promises, async/await or a login callback. For code readability I will be using async/await for all examples in this guide."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"async () => {\n    const clientData = await client.login({\n        username: 'username'\n        password: 'password'\n    })\n\n    client.getConnectionState() // This will return OPEN\n}\n")),(0,i.kt)("p",null,"Here we are logging in using the attributed required by ",(0,i.kt)("a",{parentName:"p",href:"../../tutorials/core/auth/storage/"},"storage authentication"),", which is the username and password. This will inform deepstream to lookup a user with the provided username, and if it exists to check the password is valid. If the user doesn't exist since we have ",(0,i.kt)("inlineCode",{parentName:"p"},"createUser")," enabled, it will hash the password and create a new user for us."),(0,i.kt)("p",null,"Within the database, the user structure will be as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "uuid",\n    "username": "string: a unique username",\n    "password": "string: hashed password",\n    "clientData": "JSON object: to be returned to client after succesful login",\n    "serverData": "JSON object: to be used on server for permissions"\n}\n')),(0,i.kt)("p",null,"And will be saved in a table/collection called ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," with the uuid specified. This uuid approach is important since usernames can change with time in some systems, but a uuid will always remain."),(0,i.kt)("h2",{id:"hooking-login-from-the-form"},"Hooking login from the form"),(0,i.kt)("p",null,"In order to login via the browser, we will simply add a submit event listener on the form that will try login the form when the submit button is hit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const form = document.querySelector('form')\nform.onsubmit = async (event) => {\n    event.preventDefault()\n    try {\n        const clientData = await client.login({\n            username: document.querySelector('form input[type=\"text\"]').value,\n            password: document.querySelector('form input[type=\"password\"]').value\n        })\n        form.style = \"display: none;\"\n        document.querySelector('.board-wrapper').style = \"display: block;\"\n        // We'll cover these in the next couple pages\n        createAndMonitorPostits()\n        addHeaderPostits(addPostitToBoard, clearBoard)\n    } catch (e) {\n        console.error('Error logging in', e)\n    }\n}\n")))}p.isMDXComponent=!0}}]);