"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[8852],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,p=d["".concat(l,".").concat(m)]||d[m]||h[m]||a;return n?r.createElement(p,s(s({ref:t},u),{},{components:n})):r.createElement(p,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4978:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={title:"WebRTC 02: Many-To-Many connectivity",description:"Learn how to setup WebRTC connections between multiple clients and share messages within rooms",tags:["WebRTC","Rooms","many-to-many","full-mesh"]},l=void 0,c={unversionedId:"guides/webrtc/webrtc-full-mesh",id:"guides/webrtc/webrtc-full-mesh",title:"WebRTC 02: Many-To-Many connectivity",description:"Learn how to setup WebRTC connections between multiple clients and share messages within rooms",source:"@site/docs/20-guides/webrtc/20-webrtc-full-mesh.md",sourceDirName:"20-guides/webrtc",slug:"/guides/webrtc/webrtc-full-mesh",permalink:"/docs/guides/webrtc/webrtc-full-mesh",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/webrtc/20-webrtc-full-mesh.md",tags:[{label:"WebRTC",permalink:"/docs/tags/web-rtc"},{label:"Rooms",permalink:"/docs/tags/rooms"},{label:"many-to-many",permalink:"/docs/tags/many-to-many"},{label:"full-mesh",permalink:"/docs/tags/full-mesh"}],version:"current",sidebarPosition:20,frontMatter:{title:"WebRTC 02: Many-To-Many connectivity",description:"Learn how to setup WebRTC connections between multiple clients and share messages within rooms",tags:["WebRTC","Rooms","many-to-many","full-mesh"]},sidebar:"tutorialSidebar",previous:{title:"WebRTC 01: Data Channels",permalink:"/docs/guides/webrtc/webrtc-datachannels"},next:{title:"WebRTC 03:Audio & Video",permalink:"/docs/guides/webrtc/webrtc-audio-video"}},u=[{value:"Creating a Full Mesh",id:"creating-a-full-mesh",children:[],level:3},{value:"Other Network topologies",id:"other-network-topologies",children:[],level:3},{value:"Using a relaying server",id:"using-a-relaying-server",children:[],level:3},{value:"Getting down to code",id:"getting-down-to-code",children:[{value:"Signals are handled centrally",id:"signals-are-handled-centrally",children:[],level:3},{value:"Removing connections on close",id:"removing-connections-on-close",children:[],level:3}],level:2}],h={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As we've seen in the previous ",(0,a.kt)("a",{parentName:"p",href:"webrtc-datachannels"},"data-channels tutorial")," establishing a WebRTC connection between two peers is simple enough when using a high level library. But often you'll want to chat with multiple users in the same room, join a video conference or share a file with a number of people."),(0,a.kt)("p",null,"The only trouble is: WebRTC does not have any pre-build concepts to handle many-to-many communication. This leaves you with the following options:"),(0,a.kt)("h3",{id:"creating-a-full-mesh"},"Creating a Full Mesh"),(0,a.kt)("p",null,'For smaller groups you can establish a connection from every peer to every other one. This is known as a "full mesh network topology".'),(0,a.kt)("p",null,"The benefits of full mesh networks are their decentralised state and their relative simplicity. The huge downside however is their lack of scalability - with every additional client the total number of connections grows by n - 1. Likewise, every message has to be send to every client individually causing substantial bandwith overheads."),(0,a.kt)("h3",{id:"other-network-topologies"},"Other Network topologies"),(0,a.kt)("p",null,"Full-Mesh networks are not the only way to create decentralized peer-to-peer topologies. Other approaches, e.g. ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Small-world_network"},"Small World Networks")," or ",(0,a.kt)("a",{parentName:"p",href:"http://www.ciscopress.com/articles/article.asp?p=2202410&seqNum=4"},"Hierarchical/Tree Networks")," can provide a better compromise between scalability and latency by turnign some nodes into relays that forward data to others."),(0,a.kt)("h3",{id:"using-a-relaying-server"},"Using a relaying server"),(0,a.kt)("p",null,"For a lot of usecases however it will be best to avoid peer-to-peer communication altogether and instead connect to a server-side process. For numerous large scale WebRTC users such as Google Hangouts or Twilio, the peer is always a server that gathers, aggregates, processes and forwards the data. You can learn more about this in the ",(0,a.kt)("a",{parentName:"p",href:"webrtc-in-production"},"final part of this tutorial")," where we talk about selective forwarding units, bridges, multicasting and other bits and bobs that are required to make WebRTC work in the real world."),(0,a.kt)("h2",{id:"getting-down-to-code"},"Getting down to code"),(0,a.kt)("p",null,"For this tutorial, we'll look into creating a Full Mesh between connected clients. To do this we'll perform the following steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We generate a random user-id for every client"),(0,a.kt)("li",{parentName:"ul"},"We store this user-id centrally in a ",(0,a.kt)("a",{parentName:"li",href:"../../tutorials/core/datasync/lists"},"List")),(0,a.kt)("li",{parentName:"ul"},"Whenever a client joins it, establish a connection to every user in that list"),(0,a.kt)("li",{parentName:"ul"},"To broadcast a message, we iterate trough all connections and send it to each"),(0,a.kt)("li",{parentName:"ul"},"Whenever a connection is cut, the other clients remove it from the room")),(0,a.kt)("p",null,"Here's how this works: (as always you can find the full code for ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/dsh-demo-webrtc-examples/tree/master/02-full-mesh"},"this example on Github")),(0,a.kt)("p",null,"We start by connecting to deepstream and creating a random user id:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const { DeepstreamClient } = window.DeepstreamClient\nconst ds = new DeepstreamClient('localhost:6020')\nds.login()\nconst localUserName = ds.getUid();\n")),(0,a.kt)("p",null,"To keep track of the userIds in our room we create a ",(0,a.kt)("a",{parentName:"p",href:"../../tutorials/core/datasync/lists"},"List")," - an observable array of strings whose state will be shared with all connected clients. As our own user is also a member of this chatroom, we'll add our username to the list straight away."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const users = ds.record.getList( 'users' );\nusers.addEntry( localUserName );\n")),(0,a.kt)("p",null,"Now whenever a user is added to the list, we want to establish a peer to peer connection to them. To do this we subscribe to changes to the list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create an empty map with username to connection\nconst connections = {};\n\n// Notify whenever the list of users changes\nusers.subscribe( userNames => {\n    userNames.forEach( userName => {\n        // If we already have a connection for this username return\n        if( connections[ userName ] ) return;\n        // That's us - no need to connect to ourselves\n        if( userName === localUserName ) return;\n        // Create a new connection\n        connections[ userName ] = new Connection( userName );\n    })\n\n    // Here we do the reverse - iterate through our existing connections\n    // and check if they are all still in the room\n    for( var userName in connections ) {\n        if( userNames.indexOf( userName ) === -1 ) {\n            //this one's gone - let's remove it\n            connections[ userName ].destroy();\n        }\n    }\n});\n")),(0,a.kt)("p",null,"The connections themselves are similar to the ones used in the ",(0,a.kt)("a",{parentName:"p",href:"webrtc-datachannels"},"data-channels tutorial"),", wrapped into a class. There are only two differences:"),(0,a.kt)("h3",{id:"signals-are-handled-centrally"},"Signals are handled centrally"),(0,a.kt)("p",null,"Each peer has to send SDP signals back and forth to establish the connection - but as we are managing multiple connections now we'll also receive multiple signals. To handle these we register a central listener for messages. Incoming messages are routed to the relevant recipient:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"ds.event.subscribe( `rtc-signal/${localUserName}`, msg => {\n    if( connections[ msg.user ] ) {\n        connections[ msg.user ].processSignal( msg.signal );\n    }\n});\n")),(0,a.kt)("h3",{id:"removing-connections-on-close"},"Removing connections on close"),(0,a.kt)("p",null,"Whenever a connection is closed we need to remove the associated user from our list of users in this room. To do this we use the list's ",(0,a.kt)("inlineCode",{parentName:"p"},"removeEntry()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// subscribe to the p2pConnection's close event\nthis._p2pConnection.on( 'close', this._onClose.bind( this ) );\n\n// and remove the connection upon close\n_onClose() {\n    delete connections[ this._remoteUserName ];\n    users.removeEntry( this._remoteUserName );\n}\n")),(0,a.kt)("p",null,"To put everything into perspective please have a look at the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/dsh-demo-webrtc-examples/blob/master/02-full-mesh/full-mesh.js"},"full code")),(0,a.kt)("p",null,"Now that we've got connections covered it is time to look into sending audio and video streams through them in ",(0,a.kt)("a",{parentName:"p",href:"webrtc-audio-video"},"the next tutorial")))}d.isMDXComponent=!0}}]);