"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[4108],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3104:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),s=["components"],a={title:"Vertical Cluster Connector"},c=void 0,l={unversionedId:"tutorials/plugins/clusternode/vertical",id:"tutorials/plugins/clusternode/vertical",title:"Vertical Cluster Connector",description:"How to use vertical clustering with deepstream?",source:"@site/docs/00-tutorials/60-plugins/50-clusternode/vertical.md",sourceDirName:"00-tutorials/60-plugins/50-clusternode",slug:"/tutorials/plugins/clusternode/vertical",permalink:"/docs/tutorials/plugins/clusternode/vertical",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/00-tutorials/60-plugins/50-clusternode/vertical.md",tags:[],version:"current",frontMatter:{title:"Vertical Cluster Connector"},sidebar:"tutorialSidebar",previous:{title:"Redis Cluster Connector",permalink:"/docs/tutorials/plugins/clusternode/redis"},next:{title:"Deepstream Monitoring",permalink:"/docs/tutorials/plugins/monitoring/monitoring"}},u=[{value:"How to use vertical clustering with deepstream?",id:"how-to-use-vertical-clustering-with-deepstream",children:[],level:4}],p={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"how-to-use-vertical-clustering-with-deepstream"},"How to use vertical clustering with deepstream?"),(0,i.kt)("p",null,"Starting with version 6.1 deepstream comes with the vertical cluster plugin that can be enabled via the config option. It's responsible for allowing deepstream nodes to communicate with each other while running on different cores in the same machine. This way, all the machine cores can be used to run a deepstream cluster: no network latency!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"clusterNode:\n  name: vertical\n")),(0,i.kt)("p",null,"In order to run multiple deepstream servers on each core you can use the following example code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const cluster = require('cluster')\nconst numCPUs = require('os').cpus().length\nconst process = require('process')\nconst { Deepstream } = require('@deepstream/server')\nconst server = new Deepstream({\n  clusterNode: { name: 'vertical' }\n})\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`)\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork()\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`)\n  })\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n\n  server.start()\n  console.log(`Worker ${process.pid} started`)\n}\n")),(0,i.kt)("p",null,"Or just use the deepstream CLI command ",(0,i.kt)("a",{parentName:"p",href:"/docs/docs/server/command-line-interface#deepstream-cluster"},(0,i.kt)("inlineCode",{parentName:"a"},"./deepstream cluster"))))}d.isMDXComponent=!0}}]);