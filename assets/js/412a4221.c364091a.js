"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[6711],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5347:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={title:"Creating postits",description:"Step four: Creating a postit"},c=void 0,l={unversionedId:"guides/post-it-board/the-postits",id:"guides/post-it-board/the-postits",title:"Creating postits",description:"Step four: Creating a postit",source:"@site/docs/20-guides/post-it-board/30-the-postits.md",sourceDirName:"20-guides/post-it-board",slug:"/guides/post-it-board/the-postits",permalink:"/docs/guides/post-it-board/the-postits",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/post-it-board/30-the-postits.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"Creating postits",description:"Step four: Creating a postit"},sidebar:"tutorialSidebar",previous:{title:"Logging in to your boards",permalink:"/docs/guides/post-it-board/login"},next:{title:"Grouping Post-Its Together",permalink:"/docs/guides/post-it-board/the-board"}},p=[{value:"Quick explanation of available APIs",id:"quick-explanation-of-available-apis",children:[],level:2},{value:"Creating a postit",id:"creating-a-postit",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"quick-explanation-of-available-apis"},"Quick explanation of available APIs"),(0,a.kt)("p",null,"Okay so in the skeleton provided earlier we have a basic function to allow postits to be created as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"addPostit('postit/uuid', POSTIT_TYPE.SAD /** or POSTIT_TYPE.MAD or POSTIT_TYPE.HAPPY **/, newContent => {})\n")),(0,a.kt)("p",null,"Doing that simply just adds a static postit onto the board. You can edit the content via"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"updatePostitContent('postit/uuid', 'Hey, new content!')\n")),(0,a.kt)("p",null,"And move the postit around the board by doing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"updatePostitPosition('postit/uuid', {\n  left: 200,\n  top: 200\n})\n")),(0,a.kt)("h2",{id:"creating-a-postit"},"Creating a postit"),(0,a.kt)("p",null,"Now comes the fun part\u2014getting all the cards to remain in sync across all connected devices. Let\u2019s take a step back and first look at data-sync and how it is used. We\u2019ll be using ",(0,a.kt)("a",{parentName:"p",href:"../../tutorials/core/datasync/records/"},"records")," to represent each individual postit. A record is just a convenient way of storing and manipulating JSON with data-sync built in."),(0,a.kt)("p",null,"Core concepts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A record has a unique identifier. You can create your own or use ",(0,a.kt)("inlineCode",{parentName:"li"},"getUid()")," to generate one for you:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const recordName = client.getUid()\nconst record = client.record.getRecord(recordName)\n// This next line waits for the record data to be loaded from the server\n// before continuing. Useful to avoid getting into async issues\nawait record.whenReady()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can set its data:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"record.set({\n  owner: 'john'\n  position: {\n    left: 375,\n    top: 250\n  },\n  content: 'This card is awesome!',\n  type: 'glad'\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get data:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(record.get())\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Subscribe to changes on the entire data:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"record.subscribe(data => {\n  console.log(`Card ${record.name} changed!`, data)\n})\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Subscribe to changes to a specific part of the data:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"record.subscribe('position', newPosition => {\n  console.log(`Card ${record.name} position changed!`, newPosition)\n})\n")),(0,a.kt)("p",null,"So let us tie these in. Lets say we want to create a postit, what we would do is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const createPostit = async (postitUid, initialData) => {\n    const record = client.record.getRecord(postitUid)\n    await record.whenReady()\n\n    if (initialData) {\n        record.set(initialData)\n    }\n\n    const postit = addPostit(\n        postitUid,\n        record.get(),\n        // Callback whenever user does a keypress\n        newContent => record.set('content', newContent),\n        // Callbac whenever the postit moves\n        newPosition => record.set('position', newPosition)\n    )\n\n    record.subscribe('content', content => updatePostitContent(postitUid, content), true)\n    record.subscribe('position', position => updatePostitPosition(postitUid, position), true)\n\n    record.on('delete', (record) => {\n      removePostit(postitUid)\n    })\n}\n")),(0,a.kt)("p",null,"Let us try that out now across two browsers to make sure it works as we expect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"createPostit('postit/uuid')\n")),(0,a.kt)("p",null,"And now we have a postit that we can edit, and drag around the screen. This is great, as it means things are in sync and working exactly how expect."),(0,a.kt)("p",null,"Note how we don't update the dom directly from the drag function. This is because we are using the record as our single source of truth. By doing so, our code will process things the same way, regardless of whether the action happened remotely or locally. This is a great way to consume changes\u2014otherwise, your code will become cluttered with unwanted conditions."))}d.isMDXComponent=!0}}]);