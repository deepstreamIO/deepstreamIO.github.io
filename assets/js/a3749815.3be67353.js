"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[230],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7700:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Grouping Post-Its Together",description:"Step five: Grouping Post-Its"},l=void 0,c={unversionedId:"guides/post-it-board/the-board",id:"guides/post-it-board/the-board",title:"Grouping Post-Its Together",description:"Step five: Grouping Post-Its",source:"@site/docs/20-guides/post-it-board/40-the-board.md",sourceDirName:"20-guides/post-it-board",slug:"/guides/post-it-board/the-board",permalink:"/docs/guides/post-it-board/the-board",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/post-it-board/40-the-board.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{title:"Grouping Post-Its Together",description:"Step five: Grouping Post-Its"},sidebar:"tutorialSidebar",previous:{title:"Creating postits",permalink:"/docs/guides/post-it-board/the-postits"},next:{title:"Permissioning it all",permalink:"/docs/guides/post-it-board/permissions"}},d=[],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"So we managed to create a postit which is kept in sync across multiple browsers. All thats left now is for us to be able to add more of them with different types."),(0,o.kt)("p",null,"In order to do this we will be using a deepstream data-sync concept called a list. It's essentially an array of strings that entries can be added and removed from and allows clients to organize and reference data in interesting ways."),(0,o.kt)("p",null,"Core concepts: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A list has a unique identifier. You can create your own or use ",(0,o.kt)("inlineCode",{parentName:"li"},"getUid()")," to generate one for you: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const listName = client.getUid()\nconst list = client.record.getList(listName)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can set its entries:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"list.setEntries(['a', 'b', 'c'])\nlist.addEntry('d')\nlist.removeEntry('d')\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Get them:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(list.getEntries())\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Subscribe to changes:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"list.subscribe(entries => {\n  console.log(`Board ${board.name} changed!`, entries)\n})\n\nlist.on('entry-added', entry => {\n    console.log(`Entry ${entry} added!`)\n})\n\nlist.on('entry-removed', entry => {\n    console.log(`Entry ${entry} removed!`)\n})\n")),(0,o.kt)("p",null,"So lets tie these into the board. What we want to do is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"get a list"),(0,o.kt)("li",{parentName:"ul"},"render everything on that list initially"),(0,o.kt)("li",{parentName:"ul"},"whenever the list has a new postit added, render that as well"),(0,o.kt)("li",{parentName:"ul"},"add a new post-it onto the board"),(0,o.kt)("li",{parentName:"ul"},"delete all entries on the board")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const createAndMonitorPostits = () => {\n    const list = client.record.getList('board')\n    await list.whenReady()\n    // Create postits that have already added\n    list.getEntries().forEach(createPostit)\n    // Create postits as they are added\n    list.on('entry-added', createPostit)\n}\n")),(0,o.kt)("p",null,"Whenever a user clicks on a small postit in the header, we want to add that\nas a new postit to the board."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const addPostitToBoard = async () => {\n    const positId = client.getUid()\n    createPostit(positId, { type: POSTIT_TYPE.MAD, position: { top: 0, left: 0 }, content: '' })\n\n    const list = client.record.getList('board')\n    await list.whenReady()\n    list.addEntry(positId)\n}\n")),(0,o.kt)("p",null,"And finally, whenever a user clicks on the eraser the entire board will be wiped clean"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const clearBoard = async () => {\n    const list = client.record.getList('board')\n    await list.whenReady()\n    await client.record.delete(list.getEntries()) // TODO: This API is still a WIP coming out in V5\n    list.setEntries([])\n}\n")))}u.isMDXComponent=!0}}]);