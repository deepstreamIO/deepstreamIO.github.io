"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[3874],{4381:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=r(8168),n=(r(6540),r(5680));const o={title:"WebRTC 03:Audio & Video",description:"Learn how to establish audio and video streams using deepstream",tags:["WebRTC","Video","Audio"]},i=void 0,s={unversionedId:"guides/webrtc/webrtc-audio-video",id:"guides/webrtc/webrtc-audio-video",title:"WebRTC 03:Audio & Video",description:"Learn how to establish audio and video streams using deepstream",source:"@site/docs/20-guides/webrtc/30-webrtc-audio-video.md",sourceDirName:"20-guides/webrtc",slug:"/guides/webrtc/webrtc-audio-video",permalink:"/docs/guides/webrtc/webrtc-audio-video",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/webrtc/30-webrtc-audio-video.md",tags:[{label:"WebRTC",permalink:"/docs/tags/web-rtc"},{label:"Video",permalink:"/docs/tags/video"},{label:"Audio",permalink:"/docs/tags/audio"}],version:"current",sidebarPosition:30,frontMatter:{title:"WebRTC 03:Audio & Video",description:"Learn how to establish audio and video streams using deepstream",tags:["WebRTC","Video","Audio"]},sidebar:"tutorialSidebar",previous:{title:"WebRTC 02: Many-To-Many connectivity",permalink:"/docs/guides/webrtc/webrtc-full-mesh"},next:{title:"WebRTC 04: Video Editing / Canvas Streams",permalink:"/docs/guides/webrtc/webrtc-video-manipulation"}},l=[{value:"Is that really all there is to it?",id:"is-that-really-all-there-is-to-it",children:[],level:3},{value:"Manipulating video",id:"manipulating-video",children:[],level:2}],c={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.yg)(d,(0,a.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Once you know how to ",(0,n.yg)("a",{parentName:"p",href:"webrtc-datachannels"},"establish a WebRTC connection between two peers"),", adding audio and video streams to this connection is surprisingly easy."),(0,n.yg)("p",null,"First of all we request access to the user's microphone and camera using the browser's ",(0,n.yg)("inlineCode",{parentName:"p"},"navigator.getUserMedia")," method. Once we have access to a stream we store a reference to it, render it on a video element using ",(0,n.yg)("inlineCode",{parentName:"p"},"URL.createObjectURL( stream )")," and establish our P2PConnection."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-javascript"},"navigator.getUserMedia(\n    { video: true, audio: true },\n    stream => {\n        localStream = stream;\n        $( '.local video' ).attr( 'src', URL.createObjectURL( stream ) );\n        init();\n    },\n    error => {\n        alert( 'error while accessing usermedia ' + error.toString() );\n    }\n);\n")),(0,n.yg)("p",null,"When establishing the connection we'll add the stream as a parameter:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-javascript"},"const p2pConnection = new SimplePeer({\n    initiator: document.location.hash === '#initiator',\n    stream: localStream\n});\n")),(0,n.yg)("p",null,"On the other client this will trigger a ",(0,n.yg)("inlineCode",{parentName:"p"},"'stream'")," event as soon as the stream becomes available. Upon receiving it we'll again render it to an HTML5 video tag."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-javascript"},"p2pConnection.on( 'stream', remoteStream => {\n    $( '.remote video' ).attr( 'src', URL.createObjectURL( remoteStream ) );\n});\n")),(0,n.yg)("p",null,"And that's already all it takes to establish a simple audio & video chat between to peers Please find the ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/deepstreamIO/dsh-demo-webrtc-examples/blob/master/02-full-mesh/full-mesh.js"},"full code here"),"."),(0,n.yg)("h3",{id:"is-that-really-all-there-is-to-it"},"Is that really all there is to it?"),(0,n.yg)("p",null,"If you are a regular user of video conferencing software you know one thing only too well: It doesn't work properly. Reliable video-chat is still an extremely hard problem to solve and even giants like Google or Skype struggle to provide reliable and high-quality streams between users."),(0,n.yg)("p",null,"WebRTC is no difference. If you've tried the example above it probably worked well - but only because there's a limited number of users chatting on a local network. For larger usecases you'll most likely want to avoud peer-to-peer connectivity and instead relay your video-stream to a server."),(0,n.yg)("p",null,"This server can be a so called Selective Forwarding Unit (SFU), e.g. ",(0,n.yg)("a",{parentName:"p",href:"https://jitsi.org/Projects/JitsiVideobridge"},"Jitsi's Video Bridge")," or a general purpose WebRTC Gateway such as ",(0,n.yg)("a",{parentName:"p",href:"https://janus.conf.meetecho.com/"},"Janus"),"."),(0,n.yg)("p",null,"Alternatively you can also use one of the many cloud service providers in this space, e.g. ",(0,n.yg)("a",{parentName:"p",href:"https://tokbox.com/"},"TokBox")," or ",(0,n.yg)("a",{parentName:"p",href:"https://skylink.io/"},"Skylink"),"."),(0,n.yg)("h2",{id:"manipulating-video"},"Manipulating video"),(0,n.yg)("p",null,"So far we've only worked with the raw video stream from our webcam. But in times of Snapchat dog-nose overlays and Instagram retro-filters this might not be enough. Move on to the ",(0,n.yg)("a",{parentName:"p",href:"webrtc-video-manipulation"},"next tutorial")," to learn how to edit the stream before sending it to a peer."))}u.isMDXComponent=!0},5680:(e,t,r)=>{r.d(t,{xA:()=>d,yg:()=>g});var a=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return r?a.createElement(g,i(i({ref:t},d),{},{components:r})):a.createElement(g,i({ref:t},d))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);