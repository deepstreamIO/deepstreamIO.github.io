"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[6334],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6057:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={title:"Javascript Client",description:"The entry point API documentation for the deepstream.io js client"},c=void 0,s={unversionedId:"docs/client-js/client",id:"docs/client-js/client",title:"Javascript Client",description:"The entry point API documentation for the deepstream.io js client",source:"@site/docs/10-docs/20-client-js/10-client.md",sourceDirName:"10-docs/20-client-js",slug:"/docs/client-js/client",permalink:"/docs/docs/client-js/client",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/10-docs/20-client-js/10-client.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Javascript Client",description:"The entry point API documentation for the deepstream.io js client"},sidebar:"tutorialSidebar",previous:{title:"Valve Permissions",permalink:"/docs/docs/server/valve-permissions"},next:{title:"Options",permalink:"/docs/docs/client-js/options"}},p=[{value:"deepstream(url, options)",id:"deepstreamurl-options",children:[],level:3},{value:"Events",id:"events",children:[{value:"connectionStateChanged",id:"connectionstatechanged",children:[],level:3},{value:"error",id:"error",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"login(authParams, callback)",id:"loginauthparams-callback",children:[],level:3},{value:"close()",id:"close",children:[],level:3},{value:"pause()",id:"pause",children:[],level:3},{value:"resume()",id:"resume",children:[],level:3},{value:"getConnectionState()",id:"getconnectionstate",children:[],level:3},{value:"getUid()",id:"getuid",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The deepstream JavaScript client can be used by both browsers and Node.js. You can get it via NPM or Bower as ",(0,l.kt)("inlineCode",{parentName:"p"},"@deepstream/client")," or browse the source on ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/deepstreamIO/deepstream.io-client-js"},"Github")),(0,l.kt)("h3",{id:"deepstreamurl-options"},"deepstream(url, options)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"url"),(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"The server URL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options"),(0,l.kt)("td",{parentName:"tr",align:null},"Object"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"A map of options. Please find a list of available options ",(0,l.kt)("a",{parentName:"td",href:"/docs/docs/client-js/options"},"here"))))),(0,l.kt)("p",null,"Creates a client instance and initialises the connection to the deepstream server. The connection will be kept in a quarantine state and won't be fully usable until ",(0,l.kt)("inlineCode",{parentName:"p"},"login()")," is called."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const { DeepstreamClient } = require('@deepstream/client')\nconst client = new DeepstreamClient('localhost:6020')\nclient.login()\n")),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"connectionstatechanged"},"connectionStateChanged"),(0,l.kt)("p",null,"Emitted every time the connectionstate changes. The connectionState is passed to the callback and can also be retrieved using ",(0,l.kt)("a",{href:"#getConnectionState()"},"getConnectionState()"),". A list of possible connection states is available ",(0,l.kt)("a",{parentName:"p",href:"/docs/tutorials/concepts/connectivity#connection-states"},"here")),(0,l.kt)("h3",{id:"error"},"error"),(0,l.kt)("p",null,"Aggregates all errors that are encountered. Some errors like ",(0,l.kt)("inlineCode",{parentName:"p"},"CONNECTION_ERROR")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"MESSAGE_PARSE_ERROR")," are exlusively emitted by the client.\nOthers like ",(0,l.kt)("inlineCode",{parentName:"p"},"ACK_TIMEOUT")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"VERSION_EXISTS")," that relate to a specific Record, Event or RPC are emitted first by the object they relate to and are then forwarded to the client."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"client.on('error', ( error, event, topic ) =>\n  console.log(error, event, topic);\n)\n")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"loginauthparams-callback"},"login(authParams, callback)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"authParams"),(0,l.kt)("td",{parentName:"tr",align:null},"Object"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"An object with authentication parameters")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"callback"),(0,l.kt)("td",{parentName:"tr",align:null},"Function"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"A function that will be called once the response to the authentication request is received.")))),(0,l.kt)("p",null,"Authenticates the client against the server. To learn more about how authentication works, please have a look at the ",(0,l.kt)("a",{parentName:"p",href:"/docs/tutorials/concepts/security/"},"Security Overview"),"."),(0,l.kt)("p",null,"Callback will be called with: ",(0,l.kt)("inlineCode",{parentName:"p"},"success (Boolean), data (Object)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const { DeepstreamClient } = require('@deepstream/client')\nconst client = new DeepstreamClient('localhost:6020')\n// client.getConnectionState() will now return 'AWAITING_AUTHENTICATION'\n\nclient.login({username: 'peter', password: 'sesame'}, (success, data) => {\n  if (success) {\n    // start application\n    // client.getConnectionState() will now return 'OPEN'\n  } else {\n    // extra data can be optionaly sent from deepstream for\n    // both successful and unsuccesful logins\n    alert(data)\n\n    // client.getConnectionState() will now return\n    // 'AWAITING_AUTHENTICATION' or 'CLOSED'\n    // if the maximum number of authentication\n    // attempts has been exceeded.\n  }\n})\n\n// client.getConnectionState() will now return 'AUTHENTICATING'\n")),(0,l.kt)("h3",{id:"close"},"close()"),(0,l.kt)("p",null,"Closes the connection to the server. Using this method will prevent the client from reconnecting and authenticating again with the same instance of the client. More info ",(0,l.kt)("a",{parentName:"p",href:"/docs/tutorials/concepts/connectivity/#closed-client-connection"},"here")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"client.on('connectionStateChanged', connectionState => {\n  // will be called with 'CLOSED' once the connection is successfully closed.\n})\n\nclient.close()\n")),(0,l.kt)("h3",{id:"pause"},"pause()"),(0,l.kt)("p",null,"Pauses the connection to the server and enters in ",(0,l.kt)("inlineCode",{parentName:"p"},"OFFLINE")," state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"client.on('connectionStateChanged', connectionState => {\n  // will be called with 'OFFLINE' once the connection is successfully paused.\n})\n\nclient.pause()\n")),(0,l.kt)("h3",{id:"resume"},"resume()"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Argument"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"callback"),(0,l.kt)("td",{parentName:"tr",align:null},"Function"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"A function that will be called with the result of the reconnection attempt.")))),(0,l.kt)("p",null,"Restores the connection to the server after a ",(0,l.kt)("inlineCode",{parentName:"p"},"pause()")," call."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"client.on('connectionStateChanged', connectionState => {\n  // will be called with 'RECONNECTING' and the subsequent intermediate connection states\n})\n\nclient.resume()\n")),(0,l.kt)("h3",{id:"getconnectionstate"},"getConnectionState()"),(0,l.kt)("p",null,"Returns the current connectionState. Please find a list of available connectionStates ",(0,l.kt)("a",{parentName:"p",href:"/docs/tutorials/concepts/connectivity#connection-states"},"here"),"."),(0,l.kt)("h3",{id:"getuid"},"getUid()"),(0,l.kt)("p",null,"Returnes a unique id. The uid starts with a Base64 encoded timestamp to allow for semi-sequentual ordering and ends with a random string."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"client.getUid() // 'i9i6db5q-1xak1s2sfzk'\n")))}d.isMDXComponent=!0}}]);