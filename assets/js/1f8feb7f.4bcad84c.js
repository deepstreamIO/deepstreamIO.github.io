"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[6978],{1274:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(8168),a=(n(6540),n(5680));const o={title:"Setting up the backend",description:"Starting the backend services"},i=void 0,l={unversionedId:"guides/realtime-search/setting-up-the-backend",id:"guides/realtime-search/setting-up-the-backend",title:"Setting up the backend",description:"Starting the backend services",source:"@site/docs/20-guides/realtime-search/20-setting-up-the-backend.md",sourceDirName:"20-guides/realtime-search",slug:"/guides/realtime-search/setting-up-the-backend",permalink:"/docs/guides/realtime-search/setting-up-the-backend",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/realtime-search/20-setting-up-the-backend.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Setting up the backend",description:"Starting the backend services"},sidebar:"tutorialSidebar",previous:{title:"Prerequisite",permalink:"/docs/guides/realtime-search/prerequisites"},next:{title:"Logging in",permalink:"/docs/guides/realtime-search/logging-in"}},s=[],c={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"In order to have realtime search running we need:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"deepstream server"),(0,a.yg)("li",{parentName:"ul"},"mongodb server"),(0,a.yg)("li",{parentName:"ul"},"mongodb replicate (for changefeeds to be enabled)"),(0,a.yg)("li",{parentName:"ul"},"realtime-search")),(0,a.yg)("p",null,"Due to the slightly more complex nature of the backend we will let docker-compose manage everything by just using the following commands:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/deepstreamIO/deepstream.io-realtime-search.git\ncd deepstream.io-realtime-search/example\ndocker-compose up\n")),(0,a.yg)("p",null,"Which would result in all the four images being pulled down and run, with deepstream port exposed on 6020"),(0,a.yg)("p",null,"To look a little deeper into it, you'll see that:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"We have a deepstream ",(0,a.yg)("inlineCode",{parentName:"li"},"config.yml")," file for mongodb configuration:")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"embed:server/realtime-search/example/conf/config.yml")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A docker compose file + a mongodb script which sets up deepstream, realtime search, mongodb and a mongodb replica (all using the default images):")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"embed:server/realtime-search/example/docker-compose.yml")),(0,a.yg)("p",null,"Once you run ",(0,a.yg)("inlineCode",{parentName:"p"},"docker-compose up")," that should be it for the backend!"),(0,a.yg)("p",null,"You can also look at all the CLI commands by running"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"> docker run deepstreamio/realtime-search mongo --help\n\nUsage: provider mongo [options]\n\nstart a mongodb realtime search provider\n\nOptions:\n  --mongo-url <mongo-url>            Connect to this mongo server\n  --mongo-database <mongo-database>  Name of mongo database\n  --ds-url <ds-url>                  Connect to this deepstream server\n  --logger-type <logger-type>        Log messages with pino or to std\n  --log-level <level>                Log messages with this level and above\n  --collection-lookup <fileName>     JSON file containing model lookups\n  --inspect <url>                    Enable node inspector\n  --native-query                     Use native mongodb query syntax\n  -h, --help                         output usage information\n")))}u.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,d=u["".concat(s,".").concat(m)]||u[m]||g[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);