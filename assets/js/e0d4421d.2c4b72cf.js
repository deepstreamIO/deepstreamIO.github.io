"use strict";(self.webpackChunkdeepstream_io_website=self.webpackChunkdeepstream_io_website||[]).push([[6829],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7945:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Ionic"},l=void 0,c={unversionedId:"tutorials/integrations/mobile/ionic2",id:"tutorials/integrations/mobile/ionic2",title:"Ionic",description:"This tutorial has not been updated",source:"@site/docs/00-tutorials/50-integrations/20-mobile/20-ionic2.md",sourceDirName:"00-tutorials/50-integrations/20-mobile",slug:"/tutorials/integrations/mobile/ionic2",permalink:"/docs/tutorials/integrations/mobile/ionic2",editUrl:"https://github.com/deepstreamIO/deepstream.io-website/docs/00-tutorials/50-integrations/20-mobile/20-ionic2.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Ionic"},sidebar:"tutorialSidebar",previous:{title:"KnockoutJs",permalink:"/docs/tutorials/integrations/frontend/knockout"},next:{title:"React Native",permalink:"/docs/tutorials/integrations/mobile/react-native"}},d=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"deepstream&#39;s Records and Lists",id:"deepstreams-records-and-lists",children:[],level:2},{value:"Setup deepstream with a Service",id:"setup-deepstream-with-a-service",children:[],level:2},{value:"Authenticate Client",id:"authenticate-client",children:[],level:2},{value:"Creating Chat Messages",id:"creating-chat-messages",children:[],level:2},{value:"Listing Chat Messages",id:"listing-chat-messages",children:[],level:2}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This tutorial has not been updated"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://ionicframework.com/"},"Ionic")," is a UI  framework for building mobile apps built on top of Angular and can interact with native APIs via Cordova. Ionic is incompatible with the new Angular version; this is why Ionic 2 was released to play nice with Angular 2x."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"http://imgur.com/eHry6PK.png",alt:null})),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://deepstream.io/"},"deepstream")," is the future of real-time web. It's an overwhelmingly fast, real-time server that is open source and standalone. This means you can install deepstream on your local machine; then, start building your awesome apps with its backing."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"http://imgur.com/ezluEAa.png",alt:null})),(0,i.kt)("p",null,"This article will walk you through building a real-time chat mobile app using the Ionic 2 and deepstream as shown in the following image:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"http://imgur.com/0sphh7d.gif",alt:null})),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Installation goes two ways, but a very simple process; we need to install both deepstream server and Ionic CLI tool for scaffolding Ionic projects."),(0,i.kt)("p",null,"deepstream server comes in different forms and shapes; it can be downloaded and executed as a shell command on your OS (OSX, Windows, Linux), or installed using Docker or npm. We will go the OS route in this tutorial:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Download deepstream from the ",(0,i.kt)("a",{parentName:"li",href:"https://deepstream.io/tutorials/install/linux/"},"install page"),"."),(0,i.kt)("li",{parentName:"ul"},"Extract the content of the zipped file to your project directory."),(0,i.kt)("li",{parentName:"ul"},"Run the following command on the unzipped directory to start deepstream:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Start deepstream\n./deepstream\n")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"http://imgur.com/gwaRWk4.jpg",alt:null})),(0,i.kt)("p",null,"Awesome! We have a running server, now let's create an Ionic project."),(0,i.kt)("p",null,"The Ionic CLI tool is used to scaffold new projects and must be installed using npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g ionic\n")),(0,i.kt)("p",null,"That adds a new command to your PATH so you could run Ionic-specific commands from anywhere on you PC."),(0,i.kt)("p",null,"Now, you could create a new project using the ionic ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ionic start chatMe blank --v2\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chatMe")," is the name of the app we intend to create and this will serve as the folder name as well."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blank")," is the type of template we want to start with. Ionic offers ",(0,i.kt)("a",{parentName:"li",href:"http://ionicframework.com/docs/v2/setup/tutorial/"},"various templates")," you can pick from if ",(0,i.kt)("inlineCode",{parentName:"li"},"blank")," seems boring to you."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--v2")," flag indicates that the project should be created with Ionic 2, not 1.")),(0,i.kt)("p",null,"Run the created project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# cd into directory\ncd chatMe\n# run app\nionic serve --lab\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Basic knowledge of Angular 2x is required to understand the examples shown in this post. You can get started with ",(0,i.kt)("a",{parentName:"p",href:"https://angular.io/docs/ts/latest/tutorial/"},"Tours of Heroes"))),(0,i.kt)("h2",{id:"deepstreams-records-and-lists"},"deepstream's Records and Lists"),(0,i.kt)("p",null,"deepstream at its core have two prominent members:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Records"),(0,i.kt)("li",{parentName:"ol"},"Lists")),(0,i.kt)("p",null,"Records are the building blocks and essential feature of deepstream. They are used to persist data and deliver data just like every other storage records with the added real-time capabilities. deepstream records expose three primary methods that you would be interested in:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"set()"),": Updates record value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get()"),": Creates a new record or retrieves the value of an existing record."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subscribe()"),": Used to listen to real-time changes and updates connected clients when changes occur")),(0,i.kt)("p",null,"Lists, on the other hand, are, as the name goes, a collection. deepstream list gives you the power to handle a group of records as if they were a collection. You can iterate them, sort, or even page the values (records) of a list. Lists have the important methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"addEntry()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"getEntry()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"setEntries()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe()"),", and more for performing updates and listening to changes on the collection."),(0,i.kt)("h2",{id:"setup-deepstream-with-a-service"},"Setup deepstream with a Service"),(0,i.kt)("p",null,"Interacting with the deepstream server that we set up earlier requires a deepstream client. deepstream have SDKs for various possible clients, but in our case, we will make use of that of JavaScript. To install the SDK, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @deepstream/client\n")),(0,i.kt)("p",null,"Services serve as excellent abstractions of data layer as well as separation of concern. deepstream provides real-time data. Therefore, it would be a good idea to abstract few of it's functionalities to a service class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// ./src/shared/ds.service.ts\n\nimport { Injectable } from '@angular/core';\n// Import deepstream\nimport * as deepstream from '@deepstream/client';\n\n@Injectable()\nexport class DsService {\n\n  private ds;\n  public dsInstance;\n\n  constructor() {\n    // Setup deepstream and listen for errors\n    this.ds = this.dsInstance = new DeepstreamClient('localhost:6020')\n      .on('error', error => console.log(error));\n  }\n\n  login (credentials?, loginHandler?) {\n    // Authenticate\n    this.ds.login(credentials, loginHandler);\n  }\n\n  getRecord(name) {\n    // Create or retrieve record\n    return this.ds.record.getRecord(name);\n  }\n\n  getList(name){\n    // Create or retrieve list\n    return this.ds.record.getList(name);\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"constructor")," function sets up deepstream and listens for error events."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"login")," method authenticates the deepstream client using deepstream's ",(0,i.kt)("inlineCode",{parentName:"li"},"login")," function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getRecord"),": deepstream's power lies on records -- they are what I like to call ",(0,i.kt)("em",{parentName:"li"},"live")," records because of their ability to persist and provide entities, real-time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getList")," allows you to treat a group of records like a collection.")),(0,i.kt)("h2",{id:"authenticate-client"},"Authenticate Client"),(0,i.kt)("p",null,"Client authentication is achieved by sending authentication payload to the deepstream server. This payload can be forwarded to an HTTP server to validate credentials. This example does not require any payload or credential validation. However, deepstream still requires that the login method is called to open a connection. The login method can be called without credentials if none exists:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// ./src/pages/home/home.ts\n\nimport { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\n// Import deepstream sevice\nimport { DsService } from '../../shared/ds.service';\n\n@Component({\n  selector: 'page-home',\n  templateUrl: 'home.html'\n})\nexport class HomePage {\n\n  constructor(\n    public navCtrl: NavController,\n\n    /*\n    * Inject the deepstream service\n    */\n    private ds: DsService\n  ) {}\n\n  ngOnInit() {\n    // Call the login method\n    this.ds.login(null, this.loginHandler);\n  }\n\n  loginHandler(success, data) {\n    // Login handler\n    console.log('logged in', success, data);\n  }\n}\n")),(0,i.kt)("p",null,"First, we inject the deepstream service created earlier, then use it's exposed ",(0,i.kt)("inlineCode",{parentName:"p"},"login")," method to authenticate the client."),(0,i.kt)("h2",{id:"creating-chat-messages"},"Creating Chat Messages"),(0,i.kt)("p",null,"A deepstream record will store each of the chat messages. We need to collect these messages using Ionic's textarea field, bind the field to the component class property and use a method to send the value coming in, to deepstream:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- ./src/pages/home/home.html --\x3e\n<ion-header>\n  <ion-navbar>\n    <ion-title>\n      {{username}}\n    </ion-title>\n  </ion-navbar>\n</ion-header>\n\n<ion-content padding>\n    <ion-list>\n      <ion-item>\n        <ion-label floating>Message</ion-label>\n        <ion-textarea [(ngModel)]="text"></ion-textarea>\n      </ion-item>\n    </ion-list>\n\n    <div padding>\n      <button ion-button block (click)="addChat()">Send</button>\n    </div>\n</ion-content>\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ion-navbar")," is the app bar as seen in the view's header. A username property is bound to it so as to show the user her name when she joins the chat."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ion-textarea")," is an input field for entering chat messages. It is bound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," property which we will create soon. The button, ",(0,i.kt)("inlineCode",{parentName:"p"},"ion-button")," is bound to the ",(0,i.kt)("inlineCode",{parentName:"p"},"addChat")," click handler."),(0,i.kt)("p",null,"Our new bindings can be reflected in the component class as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class HomePage {\n    // Properties\n    username;\n    text;\n\n    ngOnInit() {\n        // Get username from prompt\n        const defaultUsername = 'anonymous';\n        const username = window.prompt('Please enter your username', defaultUsername);\n\n        this.username = username || defaultUsername;\n\n        this.ds.login(null, this.loginHandler);\n    }\n\n    addChat() {\n        // Create record name with UUID\n        const recordName = 'chat/' + this.ds.dsInstance.getUid();\n        // Get or create record\n        const chatRecord = this.ds.getRecord(recordName);\n        // Update record with chat message and username\n        chatRecord.set({username: this.username, text: this.text});\n        // Clear textarea\n        this.text = '';\n        /*\n        *\n        * Update chats list which is\n        * yet to be created\n        */\n        this.chats.addEntry(recordName);\n      }\n}\n")),(0,i.kt)("p",null,"The most significant addition is the ",(0,i.kt)("inlineCode",{parentName:"p"},"addChat")," method; it creates a new record using a unique record name generated by a UUID. deepstream's client exposes this method on its API for convenient so you can access it from a deepstream instance using the ",(0,i.kt)("inlineCode",{parentName:"p"},"getUid")," method."),(0,i.kt)("p",null,"Further, into the logic, we use the record's ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," method to update the newly created record, with an object containing the chat message, as well as the username."),(0,i.kt)("p",null,"Finally, we would want to shove the new chat record into a list, ",(0,i.kt)("inlineCode",{parentName:"p"},"chats"),", which can be displayed later. Let's create this ",(0,i.kt)("inlineCode",{parentName:"p"},"chats")," list."),(0,i.kt)("h2",{id:"listing-chat-messages"},"Listing Chat Messages"),(0,i.kt)("p",null,"With deepstream list, we can group chats' records as a collection, iterate over the list and display them on the view. Creating a new chat already attempts to add the chat to a list which does not exist. We will pick up from there."),(0,i.kt)("p",null,"First, create a property to hold the list, then use record's ",(0,i.kt)("inlineCode",{parentName:"p"},"getList()")," method to create the record, and finally subscribe to this to update the data bound to the view:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export class HomePage {\n\n  // . . .\n  chats;\n  chatArray = [];\n\n  // . . .\n\n  ngOnInit() {\n\n    // . . .\n\n    this.chats = this.ds.getList('chats');\n\n    this.chats.on('entry-added', recordName => {\n\n      this.ds.getRecord( recordName ).whenReady( record => {\n\n        record.subscribe( (data) => {\n          console.log(data);\n          if(data.username && data.text) {\n            this.chatArray.unshift(data);\n          }\n        }, true );\n\n      });\n    })\n  }\n\n  // . . .\n\n}\n")),(0,i.kt)("p",null,"The subscription is done with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ngOnInit")," lifecycle which we called when Angular loads the component. The method sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"chats")," property to the list created via deepstream."),(0,i.kt)("p",null,"Next, we listen to ",(0,i.kt)("inlineCode",{parentName:"p"},"entry-added")," for the chat which is called when new values are pushed to the list, in our case, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"addEntry()")," method. A record name is passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"entry-added")," event handler, so you can subscribe to the record, and push its values to a view bound array, ",(0,i.kt)("inlineCode",{parentName:"p"},"chatArray")," when the record is ready."),(0,i.kt)("p",null,"Update the template to iterate over ",(0,i.kt)("inlineCode",{parentName:"p"},"chatArray")," and display the chats:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- . . . --\x3e\n\n<ion-content padding>\n\n    \x3c!-- . . . --\x3e\n\n    <ion-list>\n      <ion-item *ngFor="let chat of chatArray">\n        <h2>{{chat.username}}</h2>\n        <p>{{chat.text}}</p>\n      </ion-item>\n    </ion-list>\n</ion-content>\n')),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"http://imgur.com/0sphh7d.gif",alt:null})))}m.isMDXComponent=!0}}]);