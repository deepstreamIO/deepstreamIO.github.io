"use strict";(self.webpackChunkdeepstreamio_github_io=self.webpackChunkdeepstreamio_github_io||[]).push([[8330],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,f=d["".concat(u,".").concat(g)]||d[g]||p[g]||o;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=d;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1982:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],a={title:"Visualizing in the frontend",description:"Step three: Visualizing in the frontend"},u=void 0,c={unversionedId:"guides/live-progress-bar/visualizing-in-the-frontend",id:"guides/live-progress-bar/visualizing-in-the-frontend",title:"Visualizing in the frontend",description:"Step three: Visualizing in the frontend",source:"@site/docs/20-guides/live-progress-bar/40-visualizing-in-the-frontend.md",sourceDirName:"20-guides/live-progress-bar",slug:"/guides/live-progress-bar/visualizing-in-the-frontend",permalink:"/docs/guides/live-progress-bar/visualizing-in-the-frontend",editUrl:"https://github.com/deepstreamIO/deepstreamIO.github.io/docs/20-guides/live-progress-bar/40-visualizing-in-the-frontend.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{title:"Visualizing in the frontend",description:"Step three: Visualizing in the frontend"},sidebar:"tutorialSidebar",previous:{title:"Emitting events",permalink:"/docs/guides/live-progress-bar/server-events"},next:{title:"Permissions",permalink:"/docs/guides/live-progress-bar/permissions"}},l=[],p={toc:l};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"All that's left is for us to subscribe to the event and update the progress bar state whenever an event comes through."),(0,o.kt)("p",null,"In the skeleton app we have a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"updateProgressBar")," which takes a the percentage and associated message and sets it on the progress bar."),(0,o.kt)("p",null,"All we need to do to hook up events is subscribe to the unique event when making the request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n    // subscribe to changes\n    client.event.subscribe(`progress:${id}`, updateProgressBar)\n    // make the actual post request\n    const data = await postData('http://localhost:9090/post', { id })\n} catch (e) {\n    // error happened getting data\n} finally {\n    // unsubscribe to changes, whether it failed or succeeded\n    client.event.unsubscribe(`progress:${id}`, updateProgressBar)\n}\n")),(0,o.kt)("p",null,"And that's it, you should now have progress events working!"))}d.isMDXComponent=!0}}]);